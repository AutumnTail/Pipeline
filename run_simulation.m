function run_simulation()

set_paths_and_imports;

GEO_number = 'GSE19392';

condition = 'HBEs_infected_with_delNS1_post_trypsin_delNS1_1';

[gene_expression, time_points, list_of_top_DRGs, list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means, coefficients, adjacency_matrix_of_gene_regulatory_network, network_graph, graph_statistics, node_statistics, subject_name, gene_ID_type, indices_of_top_DRGs, number_of_statistically_significant_DRGs, list_of_genes, gene_expression_sorted_by_F_value, list_of_probe_ids, indices_of_genes_sorted_by_F_value, standardized_gene_expression] = load_analysis(GEO_number, condition);

number_of_non_DRGs = size(gene_expression,1) - length(indices_of_top_DRGs);

simulated_gene_expression = generate_simulated_curves(list_of_gene_clusters, gene_expression, number_of_non_DRGs, indices_of_top_DRGs);

mkdir(['Output/' GEO_number '_simulated/' condition]);
cd(['Output/' GEO_number '_simulated/' condition]);

[gene_expression, time_points, smooth_gene_trajectories, standardized_gene_expression] = step_2(simulated_gene_expression, time_points, true);

[gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients, indices_of_top_DRGs, list_of_top_DRGs, indices_of_genes_sorted_by_F_value] = step_3(list_of_genes, gene_expression, time_points, smooth_gene_trajectories, length(indices_of_top_DRGs), list_of_probe_ids, standardized_gene_expression, true);

[list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means] = step_4(list_of_probe_ids, list_of_genes, standardized_gene_expression, time_points, list_of_top_DRGs, indices_of_top_DRGs, smooth_gene_expression, true);

[coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_gene_clusters, time_points, indices_of_top_DRGs, fd_smooth_coefficients, true);

[network_graph, graph_statistics, node_statistics] = step_6(adjacency_matrix_of_gene_regulatory_network, true);

path_to_results_file = ['Results.mat'];
  
save(path_to_results_file, 'gene_expression', 'time_points', 'list_of_top_DRGs', 'list_of_gene_clusters', 'gene_expression_by_cluster', 'list_of_cluster_means', 'coefficients', 'adjacency_matrix_of_gene_regulatory_network', 'network_graph', 'graph_statistics', 'node_statistics', 'subject_name', 'gene_ID_type', 'indices_of_top_DRGs', 'number_of_statistically_significant_DRGs', 'list_of_genes', 'gene_expression_sorted_by_F_value', 'list_of_probe_ids', 'indices_of_genes_sorted_by_F_value', 'standardized_gene_expression');

close all;

cd('../../..')

end

function simulated_gene_expression = generate_simulated_curves(list_of_gene_clusters, gene_expression, number_of_non_DRGs, indices_of_top_DRGs)
  simulated_gene_expression = [];
  
  list_of_cluster_means = [];
  gene_expression_by_cluster = [];
  
  for i=1:length(list_of_gene_clusters)
    
    if(size(gene_expression(indices_of_top_DRGs(list_of_gene_clusters{i}),:),1) == 1)
      
      list_of_cluster_means = [list_of_cluster_means; mean(gene_expression(indices_of_top_DRGs(list_of_gene_clusters{i}),:),1)];    
      gene_expression_by_cluster = [gene_expression_by_cluster; {gene_expression(indices_of_top_DRGs(list_of_gene_clusters{i}),:)}];
    
    else
      list_of_cluster_means = [list_of_cluster_means; mean(gene_expression(indices_of_top_DRGs(list_of_gene_clusters{i}),:))];    
      gene_expression_by_cluster = [gene_expression_by_cluster; {gene_expression(indices_of_top_DRGs(list_of_gene_clusters{i}),:)}];
    end

  end
  
  simulated_gene_expression_DRGs = generate_simulated_curves_from_clusters(list_of_cluster_means, gene_expression_by_cluster); % i.e., the curves.
  
  mean_of_all_DRGs = mean(simulated_gene_expression_DRGs,1);  
%    simulated_gene_expression_non_DRGs = generate_simulated_curves_from_mean_curve(number_of_non_DRGs, mean_of_all_DRGs, 1);

  simulated_gene_expression_non_DRGs = generate_simulated_curves_from_mean_curve(number_of_non_DRGs, mean(gene_expression), std(gene_expression));
  
  simulated_gene_expression = [simulated_gene_expression_DRGs; simulated_gene_expression_non_DRGs];
  
  % The following two lines simply shuffle the simulated curves.
  ordering = randperm(size(simulated_gene_expression,1));
  simulated_gene_expression = simulated_gene_expression(ordering, :);
  
end


function simulated_gene_expression = generate_simulated_curves_from_clusters(list_of_cluster_means, gene_expression_by_cluster)

  simulated_gene_expression = [];

  for cluster_index = 1:size(list_of_cluster_means,1)

    mean_of_current_cluster = list_of_cluster_means(cluster_index,:);
    
    std_of_genes_in_current_cluster = std(gene_expression_by_cluster{cluster_index},1);

    number_of_genes_in_current_cluster = size(gene_expression_by_cluster{cluster_index},1);
    
    % The simulated curves for each gene in this cluster are generated by adding noise to the mean of the cluster.
    % The noise per time point a Gaussian noise with the standard deviation (per time point) from the original cluster.
    for current_gene_index=1:number_of_genes_in_current_cluster
      
      % The following two lines are equivalent.
%        expression_of_current_simulated_gene = mean_of_current_cluster + normrnd(0, std_of_genes_in_current_cluster);
      expression_of_current_simulated_gene = normrnd(mean_of_current_cluster, std_of_genes_in_current_cluster);
      
      simulated_gene_expression = [simulated_gene_expression; expression_of_current_simulated_gene];
      
    end
  
  end

end

% This function receives a row vector ([mean_curve]) of T elements, representing a gene's gene
% expression over T time points, and returns a matrix of size [number_of_curves]xT where each row
% is a normal deviate of [mean_curve] with standard deviation [standard_deviation].

function simulated_gene_expression = generate_simulated_curves_from_mean_curve(number_of_curves, mean_curve, standard_deviation)
  
  simulated_gene_expression = [];

  for i=1:number_of_curves
    simulated_gene_expression = [simulated_gene_expression; normrnd(mean_curve, standard_deviation)];
  end
end