diff --git a/alternative_pipeline.m b/alternative_pipeline.m
deleted file mode 100644
index 017dcce..0000000
--- a/alternative_pipeline.m
+++ /dev/null
@@ -1,471 +0,0 @@
-function alternative_pipeline()
-
-set_paths_and_imports;
-
-global Dynamics4GenomicBigData_HOME;
-
-cd('Input');
-s = dir('*.csv');
-file_list = {s.name}';
-cd('..');
-
-for i=1:length(file_list)
-	Condition_file = file_list{i};
-
-
-
-	%%%%%%%%%%%%%%%%%%%%
-
-	cd('Input');
-	[GEO_number, condition, samples, time_points, number_of_top_DRGs] = read_input([Condition_file]);
-	cd('..');
-
-
-	% The following function call may take some time to complete.
-	%  [geoStruct, list_of_genes, gene_ID_type, list_of_probe_ids] = get_geo_data(GEO_number);
-
-	%  GPL6193_table = readtable('GPL6193.csv');
-
-	gene_ID_type = 'XXX';
-
-	cd('GEO_cache');
-
-	geoStruct = geoseriesread([GEO_number '.txt']);
-
-	cd('..');
-
-	list_of_probe_ids = rownames(geoStruct.Data);
-
-	list_of_genes = list_of_probe_ids;
-
-
-	outputFolder = ['Output/' GEO_number '/Conditions/' condition '/'];
-
-	mkdir(outputFolder)
-
-	cd(outputFolder);
-
-	[raw_gene_expression, raw_time_points] = step_1(geoStruct, samples, time_points);
-
-	[gene_expression, time_points, smooth_gene_trajectories, standardized_gene_expression] = step_2(raw_gene_expression, raw_time_points, true);
-
-	[gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients, indices_of_top_DRGs, list_of_top_DRGs, indices_of_genes_sorted_by_F_value] = step_3(list_of_genes, gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs, list_of_probe_ids, standardized_gene_expression, true);
-
-
-	[list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means] = step_4(list_of_probe_ids, list_of_genes, standardized_gene_expression, time_points, list_of_top_DRGs, indices_of_top_DRGs, smooth_gene_expression, true);
-
-	[coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_gene_clusters, time_points, indices_of_top_DRGs, fd_smooth_coefficients, true);
-
-	[network_graph, graph_statistics, node_statistics] = step_6(adjacency_matrix_of_gene_regulatory_network, true);
-
-	[chartReport, tableReport] = step_7(list_of_genes, list_of_gene_clusters, indices_of_top_DRGs, gene_ID_type);
-
-	path_to_results_file = ['Results.mat'];
-
-  results = struct();
-  
-  results.geo_series_number = GEO_number;
-  results.condition = condition;
-  results.gene_ID_type = gene_ID_type;
-  results.list_of_probe_ids = list_of_probe_ids;
-  results.list_of_genes = list_of_genes;
-  
-  results.step_2.gene_expression = gene_expression;
-  results.step_2.time_points = time_points;
-  
-  results.step_3.list_of_top_DRGs = list_of_top_DRGs;
-  results.step_3.indices_of_top_DRGs = indices_of_top_DRGs;
-  results.step_3.number_of_statistically_significant_DRGs = number_of_statistically_significant_DRGs;
-  results.step_3.gene_expression_sorted_by_F_value = gene_expression_sorted_by_F_value;
-  results.step_3.indices_of_genes_sorted_by_F_value = indices_of_genes_sorted_by_F_value;
-  results.step_3.standardized_gene_expression = standardized_gene_expression;
-  results.step_3.standardized_gene_expression_sorted_by_F_value = standardized_gene_expression_sorted_by_F_value;
-  
-  results.step_4.list_of_gene_clusters = list_of_gene_clusters;
-  results.step_4.gene_expression_by_cluster = gene_expression_by_cluster;
-  results.step_4.list_of_cluster_means = list_of_cluster_means;
-  
-  results.step_5.coefficients = coefficients;
-  results.step_5.adjacency_matrix_of_gene_regulatory_network = adjacency_matrix_of_gene_regulatory_network;
-  
-  results.step_6.network_graph = network_graph;
-  results.step_6.graph_statistics = graph_statistics;
-  results.step_6.node_statistics = node_statistics;
-
-  save(path_to_results_file, 'results');
-	  
-	writetable(cell2table({pipeline_version}), 'VERSION.txt', 'WriteVariableNames', false);
-
-	cd(Dynamics4GenomicBigData_HOME);
-
-	write_study_report(GEO_number);
-
-	close all;
-
-	%%%%%%%%%%%%%%%%%%%%
-
-end
-
-end
-
-
-function write_study_report(GEO_number)
-
-  global Dynamics4GenomicBigData_HOME;
-  
-  geoStruct = get_geo_data(GEO_number);
-  
-  GEO_number_folder_path = [Dynamics4GenomicBigData_HOME, 'Output/', GEO_number];
-  conditions_folder_path = [GEO_number_folder_path, '/', 'Conditions'];
-  output_folder_path = [GEO_number_folder_path];
-  mkdir(output_folder_path);
-  
-  conditions = get_subdirs(conditions_folder_path);
-  
-  gene_expression = {};
-  time_points = {};
-  list_of_top_DRGs = {};
-  list_of_gene_clusters = {};
-  gene_expression_by_cluster = {};
-  list_of_cluster_means = {};
-  coefficients = {};
-  adjacency_matrix_of_gene_regulatory_network = {};
-  network_graph = {};
-  graph_statistics = {};
-  node_statistics = {};
-  subject_name = {};
-  gene_ID_type = {};
-  indices_of_top_DRGs = {};
-  number_of_statistically_significant_DRGs = {};
-  list_of_genes = {};
-  gene_expression_sorted_by_F_value = {};
-  list_of_probe_ids = {};
-  indices_of_genes_sorted_by_F_value = {};
-  standardized_gene_expression = {};
-  
-  list_of_statistically_significant_DRGs = {};
-  
-  for i = 1:size(conditions,1)
-
-    results{i} = load_analysis(GEO_number, conditions{i});
-    
-    list_of_statistically_significant_DRGs{i} = results{i}.step_3.gene_expression_sorted_by_F_value(1:results{i}.step_3.number_of_statistically_significant_DRGs,1:2);
-    
-    list_of_statistically_significant_DRGs{i} = cellfun(@num2str, list_of_statistically_significant_DRGs{i}, 'UniformOutput', false);
-    
-  end
-  
-  [frequency_of_DRGs, common_probes] =  get_frequency_of_DRGs(list_of_statistically_significant_DRGs);
-  
-  cd(output_folder_path);
-  
-  output_folder = pwd;
-  
-  copyfile([Dynamics4GenomicBigData_HOME, '/latex/Study/Part1.tex'], output_folder);
-  copyfile([Dynamics4GenomicBigData_HOME, '/latex/Study/Part2.tex'], output_folder);
-  copyfile([Dynamics4GenomicBigData_HOME, '/latex/Study/Part3.tex'], output_folder);
-  
-  draft = fopen('Report.tex', 'wt');
-  
-  fid = fopen('Part1.tex');
-  F = fread(fid, '*char')';
-  fclose(fid);    
-  fprintf(draft,'%-50s\n', F);
-  
-  
-  fprintf(draft,'%s\n', ['This manuscript applies the pipeline analysis proposed by Carey et al. (2016) to analyze the time course data available in data series ' GEO_number ' of the \textit{Gene Expression Omnibus (GEO)} in order to identify differentially expressed genes and the gene regulatory network these comprise. The analysis is focused on the ' num2str(length(conditions)) ' experimental conditions listed below. ']);
-  
-  fprintf(draft,'%s\n', ['\begin{enumerate}']);
-  
-  for condition_iter_index = 1:length(conditions)
-    condition = conditions{condition_iter_index};
-    fprintf(draft,'%s\n', ['\item \texttt{' strrep(condition, '_', '\_') '}']);
-  end
-  
-  fprintf(draft,'%s\n', ['\end{enumerate}']);
-
-  fprintf(draft,'%s', ['\par The conditions in this study have at least ' num2str(min(cellfun(@length,time_points))) ' time points. ']);
-  
-  if(isfield(geoStruct.Header.Series, 'title'))
-    fprintf(draft,'%s', ['The original study associated to dataset ' GEO_number ' is titled: \textit{``' geoStruct.Header.Series.title '''''}. ']);
-  end
-  
-  if(isfield(geoStruct.Header.Series, 'summary'))
-    fprintf(draft,'%s\n\n', ['The authors summarize this study as follows.']);
-    fprintf(draft,'%s\n\n', ['\textit{' geoStruct.Header.Series.summary '}']);
-  end
-  
-  fprintf(draft,'%s', ['The pipeline analysis used in this article (Carey et al., 2016) is composed of a sequence of steps where the data is obtained, preprocessed and analyzed for the identification of dynamic response genes (\textit{i.e.}, genes that exhibit significant changes across time), the clustering of these and the discovery of a gene regulatory network between these clusters. ']);
-  
-  fprintf(draft,'%s\n\n', ['A broad description of the pipeline steps is provided in the following subsections. The results obtained from application of these to the time course data of the conditions from series ' GEO_number ' listed earlier can be found in Section~\ref{section:results}.']);
-  
-  fid = fopen('Part2.tex');
-  F = fread(fid, '*char')';
-  fclose(fid);    
-  fprintf(draft,'%-50s\n', F);
-  
-  % Table with summary of all analysed conditions.  
-  fprintf(draft,'%s\n', ['\begin{table}']);
-  
-  fprintf(draft,'%s\n', ['\centering']);
-
-  fprintf(draft,'%s\n', ['\begin{center}']);  
-  
-  fprintf(draft,'%s\n', ['\begin{tabular}{|c|c|c|c|c|} \hline']);
-  
-  fprintf(draft,'%s\n', ['Condition & \# of time points & \# of DRGs & \# of top DRGs clustered & \# of GRMs \\ \hline']);
-  
-  statistics_of_analyses = {'Series', 'Condition', '# of time points', '# of DRGs', '# of Top DRGs for comparison', '# of GRMs'};
-  
-  for condition_iter_index = 1:length(conditions)
-    condition = conditions{condition_iter_index};
-    
-    fprintf(draft,'\n\t%s\n', ['\texttt{' strrep(condition, '_', '\_') '}' ' & ' num2str(length(results{condition_iter_index}.step_2.time_points)) ' & ' num2str(results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs) ' & ' num2str(length(results{condition_iter_index}.step_3.indices_of_top_DRGs)) ' & ' num2str(length(results{condition_iter_index}.step_4.list_of_gene_clusters)) ' \\ \hline']);
-    
-    statistics_of_current_analysis = {GEO_number, condition, num2str(size(results{condition_iter_index}.step_2.time_points,1)), num2str(results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs), num2str(size(results{condition_iter_index}.step_3.list_of_top_DRGs,1)), num2str(size(results{condition_iter_index}.step_4.list_of_gene_clusters,2))};    
-    statistics_of_analyses = [statistics_of_analyses; statistics_of_current_analysis];
-
-  end
-  
-  fprintf(draft,'%s\n', ['\end{tabular}']);
-  
-  fprintf(draft,'%s\n', ['\end{center}']);
-  
-  fprintf(draft,'%s\n', ['\caption{Result statistics from the ' num2str(length(conditions)) ' conditions analyzed in series ' GEO_number '. Full statistics in can be found in supplementary file \href{Summary.csv}{Summary.csv}.}']);
-  
-  fprintf(draft,'%s\n', ['\label{table:summary}']);
-  
-  fprintf(draft,'%s\n', ['\end{table}']);
-  
-  
-  % Table with top 25 frequent DRGs.
-  top_25_frequent_DRGs = frequency_of_DRGs(1:min([25 size(frequency_of_DRGs, 1)]), :);
-  
-  fprintf(draft,'%s\n', ['\begin{table}']);
-  
-  fprintf(draft,'%s\n', ['\centering']);
-
-  fprintf(draft,'%s\n', ['\begin{center}']);  
-  
-  fprintf(draft,'%s\n', ['\begin{tabular}{|c|c|} \hline']);
-  
-  fprintf(draft,'%s\n', ['Gene & Frequency \\ \hline']);
-  
-  for frequent_DRG_index = 1:size(top_25_frequent_DRGs,1)
-    frequent_DRG = top_25_frequent_DRGs(frequent_DRG_index, :);
-    
-    fprintf(draft,'\n\t%s\n', ['\texttt{' strrep(frequent_DRG{1}, '_', '\_') '} & ' strrep(num2str(frequent_DRG{2}), '_', '\_') ' \\ \hline']);
-
-  end
-  
-  fprintf(draft,'%s\n', ['\end{tabular}']);
-  
-  fprintf(draft,'%s\n', ['\end{center}']);
-  
-  fprintf(draft,'%s\n', ['\caption{Frequent DRGs across the conditions analyzed from series ' GEO_number '. The first column indicates gene name and the second column indicates the number of probes where the gene appears as a DRG. Full list in supplementary file \href{Frequency_of_DRGs.csv}{Frequency\_of\_DRGs.csv}.}']);
-  
-  fprintf(draft,'%s\n', ['\label{table:frequent_DRGs}']);
-  
-  fprintf(draft,'%s\n', ['\end{table}']);
-  
-  
-  for condition_iter_index = 1:length(conditions)
-    condition = conditions{condition_iter_index};
-    write_condition_section(draft, GEO_number, condition, results{condition_iter_index}.step_2.gene_expression, results{condition_iter_index}.step_2.time_points, results{condition_iter_index}.step_3.list_of_top_DRGs, results{condition_iter_index}.step_4.list_of_gene_clusters, results{condition_iter_index}.step_4.gene_expression_by_cluster, results{condition_iter_index}.step_4.list_of_cluster_means, results{condition_iter_index}.step_5.coefficients, results{condition_iter_index}.step_5.adjacency_matrix_of_gene_regulatory_network, results{condition_iter_index}.step_6.network_graph, results{condition_iter_index}.step_6.graph_statistics, results{condition_iter_index}.step_6.node_statistics, results{condition_iter_index}.gene_ID_type, results{condition_iter_index}.step_3.indices_of_top_DRGs, results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs, results{condition_iter_index}.step_3.gene_expression_sorted_by_F_value);
-  end
-
-  fid = fopen('Part3.tex');
-  F = fread(fid, '*char')';
-  fclose(fid);    
-  fprintf(draft,'%-50s\n', F);
-  
-  writetable(cell2table(statistics_of_analyses), 'Summary.csv', 'WriteVariableNames', false);
-  writetable(cell2table(frequency_of_DRGs), 'Frequency_of_DRGs.csv', 'WriteVariableNames', false);
-  
-  copyfile([Dynamics4GenomicBigData_HOME, '/latex/Study/bibliography.bib'], output_folder);
-  copyfile([Dynamics4GenomicBigData_HOME, '/latex/Study/plos2015.bst'], output_folder);
-  
-%    if isunix()
-%      % The following line compiles the .tex file into a .pdf.
-%      % Two output arguments (x and y) are used simply to prevent the output from being printed onscreen.
-%      [x, y]=system([Dynamics4GenomicBigData_HOME 'latex/Study/compile.sh ' output_folder]);
-%    end
-  
-  delete('Part1.tex');
-  delete('Part2.tex');
-  delete('Part3.tex');
-  
-  cd(Dynamics4GenomicBigData_HOME);
-
-end
-
-function subdirs = get_subdirs(folder_name)
-  d = dir(folder_name);
-  isub = [d(:).isdir];
-  subdirs = {d(isub).name}';
-  subdirs(ismember(subdirs,{'.','..'})) = [];
-end
-
-
-function [frequency_of_DRGs, common_probes] =  get_frequency_of_DRGs(list_of_statistically_significant_DRGs)
-  
-  intersection_of_probes = list_of_statistically_significant_DRGs{1}(:,1);
-  
-  for k=1:length(list_of_statistically_significant_DRGs)
-    intersection_of_probes = intersect(intersection_of_probes, list_of_statistically_significant_DRGs{k}(:,1));
-  end
-  
-  A = list_of_statistically_significant_DRGs{1}(:,1);
-  
-  B = intersection_of_probes;
-  
-  common_probes = intersection_of_probes;
-  
-  intersection_of_probes_and_genes = list_of_statistically_significant_DRGs{1}(find(ismember(A,B)),:);
-  
-  frequency_of_DRGs = get_frequency_of_each_array_element(intersection_of_probes_and_genes(:,2));
-  
-  frequency_of_probes = get_frequency_of_each_array_element(intersection_of_probes_and_genes(:,1));
-  
-end
-
-
-
-% Receives a cell array of strings of size Nx1 and returns an Nx2 cell array where the first column is the elements in the input array and the second column is the frequency of each element.
-
-%  the_array = [{'a'}; {'s'}; {'a'}; {'e'}; {'q'}];
-
-% Returns 
-%  frequency_per_element = 
-%  
-%      'a'    [2]
-%      'e'    [1]
-%      'q'    [1]
-%      's'    [1]
-
-function frequency_per_element = get_frequency_of_each_array_element(the_array)
-
-  [a b c] = unique(the_array);
-  d = hist(c,length(a));
-  P = [a num2cell(d')];
-  
-  [B I] = sort(cell2mat(P(:,2)), 'descend');
-  
-  frequency_per_element = P(I,:);  
-end
-
-function write_condition_section(draft, GEO_number, condition, gene_expression, time_points, list_of_top_DRGs, list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means, coefficients, adjacency_matrix_of_gene_regulatory_network, network_graph, graph_statistics, node_statistics, subject_name, gene_ID_type, indices_of_top_DRGs, number_of_statistically_significant_DRGs, gene_expression_sorted_by_F_value)
-
-  global Dynamics4GenomicBigData_HOME;
-  
-  fprintf(draft,'%s\n', ['']);
-  
-  fprintf(draft,'%s\n', ['\subsection{Condition \texttt{' strrep(condition, '_', '\_') '}}']);
-  
-  fprintf(draft,'%s\n', ['\par Figure~\ref{fig:smoothexp_' condition '} shows the smooth expression curves.']);
-  
-  fprintf(draft,'%s\n', ['\par Figure~\ref{figure:drgs_' condition '} shows the expression of the top ranking dynamic response genes identified using the method described in Section~\ref{section:identification_of_drgs}.']);
-  
-  fprintf(draft,'%s\n', ['\par Figure~\ref{figure:grms_' condition '} shows the expression of gene response modules identified using the method described in Section~\ref{section:identification_of_grms}.']);
-  
-  fprintf(draft,'%s\n', ['\par Figure~\ref{figure:grmstype_' condition '} shows the GRMs'' mean expression curves grouped into four categories by cluster size. The four categories are single-gene modules (SGM) with only one gene in each cluster, small-size modules (SSM) that contain between 2-10 genes in each cluster, medium-size modules (MSM) that consist of 11-99 genes in each of the clusters and large-size modules (LSM) which contain over 100 genes in each cluster.']);
-  
-  fprintf(draft,'%s\n', ['\par Figure~\ref{fig:generegnet_' condition '} shows the gene regulatory network discovered using the method described in Section~\ref{section:identification_of_grn}.']);
-  
-  fprintf(draft,'%s\n', ['\par Graph theorists and network analysts have developed a number of metrics to characterize biological networks \cite{huber2007graphs, lee2004coexpression}. These metrics facilitate drug target identification and insight on potential strategies for treating various diseases.']);
-
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_2/Paper_01.png}']);
-  fprintf(draft,'%s\n', ['\caption{All genes in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{fig:allgenes_' condition '}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-  
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_3/Smooth_expression_curves.pdf}']);
-  fprintf(draft,'%s\n', ['\caption{Smooth expression of all genes in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{fig:smoothexp_' condition '}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-  
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_3/Smooth_expression_of_DRGs.png}']);
-  fprintf(draft,'%s\n', ['\caption{Dynamic response genes in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{figure:drgs_' condition '}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-  
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_3/Smooth_expression_of_top_DRGs.png}']);
-  fprintf(draft,'%s\n', ['\caption{Top ranking DRGs in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{figure:top_drgs_' condition '}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_4/GRMs_1.pdf}']);
-  fprintf(draft,'%s\n', ['\caption{Expression of the gene response modules in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{figure:grms_' condition '}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_4/GRMs.pdf}']);
-  fprintf(draft,'%s\n', ['\caption{Mean curves of gene response modules grouped by cluster size in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{figure:grmstype_' condition '}}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-  
-  fprintf(draft,'%s\n', ['\begin{figure}']);
-  fprintf(draft,'%s\n', ['\centering']);
-  fprintf(draft,'%s\n', ['\includegraphics[width=\textwidth]{' Dynamics4GenomicBigData_HOME '/Output/' GEO_number '/Conditions/' condition '/Step_6/Network_plot_MATLAB.pdf}']);
-  fprintf(draft,'%s\n', ['\caption{Gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.}']);
-  fprintf(draft,'%s\n', ['\label{fig:generegnet_' condition '}']);
-  fprintf(draft,'%s\n', ['\end{figure}']);
-  
-  % Graph statistics of the GRN
-  text = ['\begin{center} \begin{table} \centering \begin{tabular}{ | l | l | p{5cm} |} \hline Metric & Value  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-
-  text = [graph_statistics{1,1} ' & ' num2str(graph_statistics{1,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = [graph_statistics{2,1} ' & ' num2str(graph_statistics{2,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = [graph_statistics{3,1} ' & ' num2str(graph_statistics{3,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = [graph_statistics{4,1} ' & ' num2str(graph_statistics{4,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = ['\end{tabular} \caption{Graph metrics of the gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.} \label{table:graphstats_' condition '} \end{table} \end{center}'];
-  fprintf(draft, '%s\n\n', text);
-  
-  % Node statistics of the GRN
-  text = ['\begin{center} \begin{table} \centering \begin{tabular}{ | l | c | c |} \hline Metric & Top ranking module & Bottom ranking module \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  for metric_index = 2:size(node_statistics,2)
-    
-    [max_value, index_of_max] = max([node_statistics{2:size(node_statistics,1),metric_index}]);
-    [min_value, index_of_min] = min([node_statistics{2:size(node_statistics,1),metric_index}]);
-      
-    text = [node_statistics{1,metric_index} ' & ' node_statistics{index_of_max+1,1} ' & ' node_statistics{index_of_min+1,1} '  \\ \hline'];
-    fprintf(draft, '%s\n', text);
-    
-  end
-  
-  text = ['\end{tabular} \caption{Node metrics of the gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.} \label{table:nodestats_' condition '} \end{table} \end{center}'];
-  fprintf(draft, '%s\n\n', text);
-  
-  % Gene annotation
-  text = ['In order to annotate all the dynamic response genes in condition \texttt{' strrep(condition, '_', '\_') '}, the full list of genes must be submitted to the \textit{DAVID} \href{https://david.ncifcrf.gov}{website}. This full list of genes can be found in supplementary file \href{Conditions/' condition '/Step_7/All\_DRGs.txt}{All\_DRGs.txt}.'];
-  fprintf(draft, '%s', text);
-  
-  text = ['The list of genes belonging to module $M1$ from condition \texttt{' strrep(condition, '_', '\_') '} can be found in supplementary file \href{Conditions/' condition '/Step_7/M1/Genes_in_M1.txt}{Genes\_in\_M1.txt}. This list can be used to annotate only the genes in $M1$ using the \textit{DAVID} \href{https://david.ncifcrf.gov}{website}. An analogous method should be used to annotate the genes in other gene response modules.'];
-  fprintf(draft, '%s', text);
-  
-%    cd(Dynamics4GenomicBigData_HOME);
-  
-end
diff --git a/compare.m b/compare.m
old mode 100644
new mode 100755
index 5a5334b..3473c20
--- a/compare.m
+++ b/compare.m
@@ -27,21 +27,31 @@ function compare()
 	if (i~=j)
 	  results_1 = load_analysis(GEO_number, inputData{i,1});
 	  results_2 = load_analysis(GEO_number, inputData{j,1});
-
+	  
+	  % In the following lines we make sure that the two conditions have the same time points
+	  % and complete where any are missing.	  
+	  % This condition simply checks if the list of time points in both conditions are exactly
+	  % the same. That is to say, it verifies that the time points are the same and in the same
+	  % order. If the values are the same then they should also appear in the same order
+	  % because the pipeline sorts them.
+	  if ~isequal(results_1.step_2.time_points, results_2.step_2.time_points)
+	    [results_1, results_2] = equalizeConditions(results_1, results_2);
+	  end
+	  
 	  if(strcmp(GEO_number, GEO_number))
 	    
 	    % The following lines find and output the list of common statistically significant DRGs.
 	    cd(general_comparison_folder);
 	 
-	    probes1 = strtrim(results_1.step_3.gene_expression_sorted_by_F_value(1:results_1.step_3.number_of_statistically_significant_DRGs,1));
-	    probes2 = strtrim(results_2.step_3.gene_expression_sorted_by_F_value(1:results_2.step_3.number_of_statistically_significant_DRGs,1));
+	    probes1 = strtrim(table2cell(results_1.step_3.gene_expression_sorted_by_F_value(1:results_1.step_3.number_of_statistically_significant_DRGs,2)));
+	    probes2 = strtrim(table2cell(results_2.step_3.gene_expression_sorted_by_F_value(1:results_2.step_3.number_of_statistically_significant_DRGs,2)));
 	    common_DRG_probes = intersect(probes1,probes2);
 	    
 	    [indices_of_common_DRGs, not_found] = find_strings_in_cell_array(probes1, common_DRG_probes);
 	    
-	    common_DRG_genes = results_1.step_3.gene_expression_sorted_by_F_value(indices_of_common_DRGs,2);
+	    common_DRGs = results_1.step_3.gene_expression_sorted_by_F_value(indices_of_common_DRGs,2:3);
 	    
-	    writetable(cell2table([[{'Probe IDs'} {'Gene names'}]; [common_DRG_probes common_DRG_genes]]), 'Common_statistically_significant_DRGs.csv', 'WriteVariableNames', false);
+	    writetable(common_DRGs, 'Common_statistically_significant_DRGs.csv', 'WriteVariableNames', true);
 	    
 	    cd(Dynamics4GenomicBigData_HOME);
 
@@ -53,9 +63,9 @@ function compare()
 	    
 	    output_gene_correlations(results_1, results_2);
 	    
-	    output_comparison_plots(results_1.condition, results_1.step_4.list_of_gene_clusters, results_1.step_4.gene_expression_by_cluster, results_1.step_4.list_of_cluster_means, results_1.step_2.time_points, results_2.condition, zscore(results_2.step_2.gene_expression')', results_1.step_3.indices_of_top_DRGs, results_1.list_of_genes, results_1.list_of_probe_ids);
-			
-	    plot_cluster_matches(results_1.condition, results_1.step_4.gene_expression_by_cluster, results_1.step_4.list_of_cluster_means, results_1.step_2.time_points, results_2.condition, results_2.step_4.gene_expression_by_cluster, results_2.step_4.list_of_cluster_means, results_2.step_2.time_points);
+	    output_comparison_plots(results_1.condition, results_1.step_4.list_of_grms, results_1.step_2.time_points, results_2.condition, cell2mat(table2cell(results_2.step_3.standardized_gene_expression(:,3:size(results_2.step_3.standardized_gene_expression, 2)))), results_1.step_3.indices_of_top_DRGs, results_1.list_of_genes, results_1.list_of_probe_ids);
+	    
+	    plot_cluster_matches(results_1.condition, results_1.step_4.list_of_grms, results_1.step_2.time_points, results_2.condition, results_2.step_4.list_of_grms, results_2.step_2.time_points);
 	    
 	    cd(Dynamics4GenomicBigData_HOME);
 	  end
@@ -65,46 +75,142 @@ function compare()
   end
 end
 
-function output_gene_correlations(results_1, results_2)
+function [equalized_results_1, equalized_results_2] = equalizeConditions(results_1, results_2)
 
-  name_of_first_subject = results_1.condition;
-  name_of_second_subject = results_2.condition;
+  old_results_1 = results_1;
+  old_results_2 = results_2;
   
-  number_of_DRGs = min(size(results_1.step_3.list_of_top_DRGs,1), size(results_2.step_3.list_of_top_DRGs,1));
+  new_time_points = sort(union(results_1.step_2.time_points, results_2.step_2.time_points));
   
+  results_1.step_2.original_time_points = results_1.step_2.time_points;
+  results_2.step_2.original_time_points = results_2.step_2.time_points;
   
-  matrix_of_correlations_sorted_by_F_value = [];
+  results_1.step_2.time_points = new_time_points;
+  results_2.step_2.time_points = new_time_points;
   
-  for drg_index=1:number_of_DRGs
-    probe_id_of_current_drg_in_first_subject = results_1.step_3.standardized_gene_expression_sorted_by_F_value(drg_index,1);
-    
-    [indices, not_found] = find_strings_in_cell_array(results_2.step_3.standardized_gene_expression_sorted_by_F_value(:,1), probe_id_of_current_drg_in_first_subject);
-    
-    expression_of_current_drg_in_first_subject = cell2mat(results_1.step_3.standardized_gene_expression_sorted_by_F_value(drg_index,4:size(results_1.step_3.standardized_gene_expression_sorted_by_F_value,2)));
+  % The following are the fields where the interpolation will be required.
+  % results_1.step_4.gene_expression_by_cluster
+  % results_2.step_2.gene_expression  
+  % results_1.step_4.list_of_cluster_means
+  % results_2.step_4.list_of_cluster_means  
+  
+  % Interpolating in the clusters of the first condition
+  for cluster_index=1:size(results_1.step_4.gene_expression_by_cluster, 1)
+    expression_in_current_cluster = results_1.step_4.gene_expression_by_cluster{cluster_index};    
+    results_1.step_4.gene_expression_by_cluster{cluster_index} = interpolate(results_1.step_2.original_time_points', expression_in_current_cluster, results_1.step_2.time_points');
+  end
+  
+  % Interpolating in the clusters of the second condition
+  for cluster_index=1:size(results_2.step_4.gene_expression_by_cluster, 1)
+    expression_in_current_cluster = results_2.step_4.gene_expression_by_cluster{cluster_index};    
+    results_2.step_4.gene_expression_by_cluster{cluster_index} = interpolate(results_2.step_2.original_time_points', expression_in_current_cluster, results_2.step_2.time_points');
+  end
+  
+  % Interpolating in the expression level matrix of the first condition
+  results_1.step_2.gene_expression = interpolate(results_1.step_2.original_time_points', results_1.step_2.gene_expression, results_1.step_2.time_points');
+  
+  % Interpolating in the expression level matrix of the second condition
+  results_2.step_2.gene_expression = interpolate(results_2.step_2.original_time_points', results_2.step_2.gene_expression, results_2.step_2.time_points');
+  
+  % Interpolating in the mean expression level of the modules in the first condition
+  results_1.step_4.list_of_cluster_means = interpolate(results_1.step_2.original_time_points', results_1.step_4.list_of_cluster_means, results_1.step_2.time_points');
+  
+  % Interpolating in the mean expression level of the modules in the second condition
+  results_2.step_4.list_of_cluster_means = interpolate(results_2.step_2.original_time_points', results_2.step_4.list_of_cluster_means, results_2.step_2.time_points');
+  
+  % Interpolating in the std expression level of the modules in the first condition
+  expression_as_matrix = cell2mat(results_1.step_3.standardized_gene_expression_sorted_by_F_value(:,4:size(results_1.step_3.standardized_gene_expression_sorted_by_F_value,2)));
+  interpolated_expression_as_matrix = interpolate(results_1.step_2.original_time_points', expression_as_matrix, results_1.step_2.time_points');
+  results_1.step_3.standardized_gene_expression_sorted_by_F_value=[results_1.step_3.standardized_gene_expression_sorted_by_F_value(:,1:3) num2cell(interpolated_expression_as_matrix)];
+  
+  % Interpolating in the std expression level of the modules in the second condition
+  expression_as_matrix = cell2mat(results_2.step_3.standardized_gene_expression_sorted_by_F_value(:,4:size(results_2.step_3.standardized_gene_expression_sorted_by_F_value,2)));
+  interpolated_expression_as_matrix = interpolate(results_2.step_2.original_time_points', expression_as_matrix, results_2.step_2.time_points');
+  results_2.step_3.standardized_gene_expression_sorted_by_F_value=[results_2.step_3.standardized_gene_expression_sorted_by_F_value(:,1:3) num2cell(interpolated_expression_as_matrix)];
+  
+  equalized_results_1 = results_1;
+  equalized_results_2 = results_2;
+  
+end
+
+% This function calculates the splines (x,y) for each row of y_matrix and returns the interpolated
+% values (yq_matrix) for each element in xq.
+% x is a horizontal vector.
+% y_matrix is a matrix. Number of columns is the same as the number of elements in x.
+% xq is a horizontal vector.
+function yq_matrix = interpolate(x, y_matrix, xq)
+
+%    x = [1 2 3 4 5 6];
+%    y_matrix = [[1 4 9 16 25 36]; [1 8 27 64 125 216]];
+%    xq = [1.5 2.5];
+
+  yq_matrix = [];
+
+  for i=1:size(y_matrix, 1)
+    y = y_matrix(i,:);
     
-    expression_of_current_drg_in_second_subject = cell2mat(results_2.step_3.standardized_gene_expression_sorted_by_F_value(indices(1),4:size(results_1.step_3.standardized_gene_expression_sorted_by_F_value,2)));
+    % The following condition checks that none of the values in y is NaN.
+    % If any of the values of y is Nan then the interpolation cannot be performed and a vector of
+    % only Nan values will be used instead of the interpolated values.
+    % This check is necessary because the expression data in some GEO series inexplicably come with
+    % NaN values.
+    if ~isempty(find(isnan(y)))
+      yq_matrix = [yq_matrix; repmat(nan, 1, length(xq))];
+    else
+      yq_matrix = [yq_matrix; spline(x, y, xq)];
+    end
+  end
+end
+
+function output_gene_correlations(results_1, results_2)
+
+  name_of_first_subject = results_1.condition;
+  name_of_second_subject = results_2.condition;
+
+  matrix_of_correlations_sorted_by_F_value = [];
+  
+  for drg_index=1:size(results_1.step_3.standardized_gene_expression_sorted_by_F_value, 1)
+    probe_id_of_current_drg_in_first_subject = table2cell(results_1.step_3.standardized_gene_expression_sorted_by_F_value(drg_index, 2));
     
-    correlation_index = corr(expression_of_current_drg_in_first_subject', expression_of_current_drg_in_second_subject', 'type', 'Spearman');
+    [indices, not_found] = find_strings_in_cell_array(table2cell(results_2.step_3.standardized_gene_expression_sorted_by_F_value(:,2)), probe_id_of_current_drg_in_first_subject);
     
-    matrix_of_correlations_sorted_by_F_value = [matrix_of_correlations_sorted_by_F_value; {results_1.step_3.standardized_gene_expression_sorted_by_F_value{drg_index,1} results_1.step_3.standardized_gene_expression_sorted_by_F_value{drg_index,2}  correlation_index}];
+    if isempty(indices)
+      matrix_of_correlations_sorted_by_F_value = [matrix_of_correlations_sorted_by_F_value; [table2cell(results_1.step_3.standardized_gene_expression_sorted_by_F_value(drg_index,1:4)) {nan}]];
+    else
+      expression_of_current_drg_in_first_subject = cell2mat(table2cell(results_1.step_3.standardized_gene_expression_sorted_by_F_value(drg_index,5:size(results_1.step_3.standardized_gene_expression_sorted_by_F_value,2))));
+      
+      expression_of_current_drg_in_second_subject = cell2mat(table2cell(results_2.step_3.standardized_gene_expression_sorted_by_F_value(indices(1),5:size(results_2.step_3.standardized_gene_expression_sorted_by_F_value,2))));
+      
+      correlation_index = corr(expression_of_current_drg_in_first_subject', expression_of_current_drg_in_second_subject', 'type', 'Spearman');
+      
+      matrix_of_correlations_sorted_by_F_value = [matrix_of_correlations_sorted_by_F_value; [table2cell(results_1.step_3.standardized_gene_expression_sorted_by_F_value(drg_index,1:4)) {correlation_index}]];
+    end
   end
   
-  [useless_variable, indices_of_sorted_correlations] = sort(cell2mat(matrix_of_correlations_sorted_by_F_value(:,3)), 'descend');
+  [useless_variable, indices_of_sorted_correlations] = sort(cell2mat(matrix_of_correlations_sorted_by_F_value(1:size(results_1.step_3.list_of_top_DRGs,1),5)), 'descend');
+  
+  matrix_of_drgs_correlations_sorted_by_correlations = matrix_of_correlations_sorted_by_F_value(indices_of_sorted_correlations,:);
+  
+  [useless_variable, indices_of_sorted_correlations] = sort(cell2mat(matrix_of_correlations_sorted_by_F_value(:,5)), 'descend');
   
   matrix_of_correlations_sorted_by_correlations = matrix_of_correlations_sorted_by_F_value(indices_of_sorted_correlations,:);
   
-  correlations_matrix_header = [{'Probe ID'} {'Gene ID'} {['Spearman correlation between expression in ' name_of_first_subject ' and ' name_of_second_subject]}];
+  correlations_matrix_header = [{'Row in GSE matrix'} {'Probe ID'} {'Gene ID'} {'F value'} {['Spearman correlation between expression in ' name_of_first_subject ' and ' name_of_second_subject]}];
   
   matrix_of_correlations_sorted_by_F_value = [correlations_matrix_header; matrix_of_correlations_sorted_by_F_value];
   
   matrix_of_correlations_sorted_by_correlations = [correlations_matrix_header; matrix_of_correlations_sorted_by_correlations];
   
-  writetable(cell2table(matrix_of_correlations_sorted_by_F_value), ['Expression_level_correlation_(sorted_by_F_value).csv'], 'WriteVariableNames', false);
-  writetable(cell2table(matrix_of_correlations_sorted_by_correlations), ['Expression_level_correlation_(sorted_by_correlation).csv'], 'WriteVariableNames', false);
+  matrix_of_drgs_correlations_sorted_by_correlations = [correlations_matrix_header; matrix_of_drgs_correlations_sorted_by_correlations];
+  
+  writetable(cell2table(matrix_of_drgs_correlations_sorted_by_correlations), ['Expression_level_correlation_of_DRGs_(sorted_by_correlation).csv'], 'WriteVariableNames', false);
+  writetable(cell2table(matrix_of_correlations_sorted_by_F_value(1:size(results_1.step_3.list_of_top_DRGs,1),:)), ['Expression_level_correlation_of_DRGs(sorted_by_F_value).csv'], 'WriteVariableNames', false);
+  writetable(cell2table(matrix_of_correlations_sorted_by_F_value), ['Expression_level_correlation_of_all_genes(sorted_by_F_value).csv'], 'WriteVariableNames', false);
+  writetable(cell2table(matrix_of_correlations_sorted_by_correlations), ['Expression_level_correlation__of_all_genes(sorted_by_correlation).csv'], 'WriteVariableNames', false);
   
 end
 
-function output_comparison_plots(name_of_first_subject, list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means, time_points, name_of_second_subject, gene_expression_2, indices_of_DRGs, list_of_genes, list_of_probe_ids)
+function output_comparison_plots(name_of_first_subject, list_of_grms, time_points, name_of_second_subject, gene_expression_2, indices_of_DRGs, list_of_genes, list_of_probe_ids)
 
       global Dynamics4GenomicBigData_HOME;
   
@@ -117,7 +223,7 @@ function output_comparison_plots(name_of_first_subject, list_of_gene_clusters, g
       p_value_output_matrix = {'GRM number', 'p-value (Wilcoxon)', 'p-value (KS)', 'p-value (KW)', 'p-value (correlation with mean)', 'p-value (bootstrap)', 'p-value (permutation)', ['p-value < ' num2str(alpha_threshold)], '', 'Spearman correlation coefficient', 'Coefficient < 0.75?'};
 
       
-      number_of_clusters = size(list_of_cluster_means,1);
+      number_of_clusters = size(list_of_grms,1);
 
       number_of_subplots = 2 * number_of_clusters;
       
@@ -154,8 +260,8 @@ function output_comparison_plots(name_of_first_subject, list_of_gene_clusters, g
 	    
 	while gen <= number_of_plots_in_current_page
 	  
-	  expression_of_first_subject = gene_expression_by_cluster{currentClusterIndex};
-	  expression_of_second_subject = gene_expression_2(indices_of_DRGs(list_of_gene_clusters{currentClusterIndex}),:);
+	  expression_of_first_subject = cell2mat(table2cell(list_of_grms{currentClusterIndex}(:, 4:size(list_of_grms{currentClusterIndex}, 2))));
+	  expression_of_second_subject = gene_expression_2(cell2mat(table2cell(list_of_grms{currentClusterIndex}(:,1))), :);
 	  
 	  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 	  
@@ -182,8 +288,8 @@ function output_comparison_plots(name_of_first_subject, list_of_gene_clusters, g
 	  % This section calculates the Spearman correlation between each gene's expression in the first individual and the expression in the second individual.
 	  % The information is output to a spreadsheet.
 	  
-	  genes_in_current_cluster = list_of_genes(indices_of_DRGs(list_of_gene_clusters{currentClusterIndex}));
-	  probes_in_current_cluster = list_of_probe_ids(indices_of_DRGs(list_of_gene_clusters{currentClusterIndex}));
+	  genes_in_current_cluster = table2cell(list_of_grms{currentClusterIndex}(:,3));
+	  probes_in_current_cluster = table2cell(list_of_grms{currentClusterIndex}(:,2));
 	  
 	  correlations_of_current_cluster_header = [{['Probe ID']} {['Gene ID']} {['Spearman correlation between expression in ' name_of_first_subject ' and ' name_of_second_subject]}];
 	  correlations_of_current_cluster = [];
@@ -223,7 +329,12 @@ function output_comparison_plots(name_of_first_subject, list_of_gene_clusters, g
 
 	  hold on;
 
-	  plot(list_of_cluster_means(currentClusterIndex,:),'o-r','LineWidth',1.5);
+	  if size(expression_of_first_subject, 1) == 1
+	    plot(mean(cell2mat(table2cell(list_of_grms{currentClusterIndex}(:, 4:size(list_of_grms{currentClusterIndex}, 2)))), 1),'o-r','LineWidth',1.5);
+	  else
+	    plot(mean(cell2mat(table2cell(list_of_grms{currentClusterIndex}(:, 4:size(list_of_grms{currentClusterIndex}, 2))))),'o-r','LineWidth',1.5);
+	  end
+	  
 
 	  y_axis_limits = [min([min(expression_of_first_subject), min(expression_of_second_subject)])-.05,max([max(expression_of_first_subject), max(expression_of_second_subject)])+.05];
 	  ylim(y_axis_limits);
@@ -293,10 +404,35 @@ function output_comparison_plots(name_of_first_subject, list_of_gene_clusters, g
       cd('..');
 end
 
-function plot_cluster_matches(name_of_first_subject, gene_expression_by_cluster, list_of_cluster_means, time_points, name_of_second_subject, gene_expression_by_cluster_2, list_of_cluster_means_2, time_points_2)
+function plot_cluster_matches(name_of_first_subject, list_of_grms, time_points, name_of_second_subject, list_of_grms_2, time_points_2)
 
     global Dynamics4GenomicBigData_HOME;
 
+    list_of_cluster_means = [];
+    for i = 1:length(list_of_grms)    
+      if size(list_of_grms{i}(:, 4:size(list_of_grms{i}, 2)), 1) == 1
+	cluster_mean = mean(cell2mat(table2cell(list_of_grms{i}(:, 4:size(list_of_grms{i}, 2)))),1);
+	list_of_cluster_means = [list_of_cluster_means; {cluster_mean}];
+      else
+	cluster_mean = mean(cell2mat(table2cell(list_of_grms{i}(:, 4:size(list_of_grms{i}, 2)))));
+	list_of_cluster_means = [list_of_cluster_means; {cluster_mean}];
+      end
+    end
+    
+    list_of_cluster_means_2 = [];
+    for i = 1:length(list_of_grms_2)    
+      if size(list_of_grms_2{i}(:, 4:size(list_of_grms_2{i}, 2)), 1) == 1
+	cluster_mean = mean(cell2mat(table2cell(list_of_grms_2{i}(:, 4:size(list_of_grms_2{i}, 2)))),1);
+	list_of_cluster_means_2 = [list_of_cluster_means_2; {cluster_mean}];
+      else
+	cluster_mean = mean(cell2mat(table2cell(list_of_grms_2{i}(:, 4:size(list_of_grms_2{i}, 2)))));
+	list_of_cluster_means_2 = [list_of_cluster_means_2; {cluster_mean}];
+      end
+    end
+    
+    list_of_cluster_means = cell2mat(list_of_cluster_means);
+    list_of_cluster_means_2 = cell2mat(list_of_cluster_means_2);
+    
     x = list_of_cluster_means;
     y = list_of_cluster_means_2;
     
@@ -318,11 +454,12 @@ function plot_cluster_matches(name_of_first_subject, gene_expression_by_cluster,
       module_with_lowest_correlation = find(z(current_cluster,:) == min(z(current_cluster,:)), 1, 'first');
       
       highest_correlation = max(z(current_cluster,:));
-			lowest_correlation = min(z(current_cluster,:));
+      lowest_correlation = min(z(current_cluster,:));
+      
       
-      expression_of_first_subjects_current_cluster = gene_expression_by_cluster{current_cluster};      
-      expression_of_second_subjects_1st_cluster = gene_expression_by_cluster_2{module_with_lowest_correlation};      
-      expression_of_second_subjects_2nd_cluster = gene_expression_by_cluster_2{module_with_highest_correlation};
+      expression_of_first_subjects_current_cluster = cell2mat(table2cell(list_of_grms{current_cluster}(:, 4:size(list_of_grms{current_cluster}, 2))));
+      expression_of_second_subjects_1st_cluster = cell2mat(table2cell(list_of_grms_2{module_with_lowest_correlation}(:, 4:size(list_of_grms_2{module_with_lowest_correlation}, 2))));
+      expression_of_second_subjects_2nd_cluster = cell2mat(table2cell(list_of_grms_2{module_with_highest_correlation}(:, 4:size(list_of_grms_2{module_with_highest_correlation}, 2))));
       
       expression_of_first_subjects_cluster = expression_of_first_subjects_current_cluster;
       name_of_first_subjects_cluster = ['M' num2str(current_cluster)];
diff --git a/find_strings_in_cell_array.m b/find_strings_in_cell_array.m
index 39a9ab7..29c5e7f 100644
--- a/find_strings_in_cell_array.m
+++ b/find_strings_in_cell_array.m
@@ -1,3 +1,12 @@
+% The parameters of this function are cell arrays of strings.
+% The function returns the indices in the first array where members of the second array were found.
+% Example
+% Input
+% cell_array_to_search = {'A', 'B', 'ABC', 'C', 'EFGZ', 'D', 'F'}
+% cell_array_to_search_for = {'ABC', 'EFGZ', 'HOHO'}
+% Output
+% indices = [3; 5]
+% not_found = ['HOHO']
 function [indices, not_found] = find_strings_in_cell_array(cell_array_to_search, cell_array_to_search_for)
 
   indices = [];
diff --git a/get_geo_data.m b/get_geo_data.m
index 64ad11d..597370b 100644
--- a/get_geo_data.m
+++ b/get_geo_data.m
@@ -1,5 +1,11 @@
 function [geoStruct, list_of_genes, gene_ID_type, list_of_probe_ids] = get_geo_data(GEO_number)
 
+  global Dynamics4GenomicBigData_HOME;
+  
+  current_folder = pwd;
+  
+  cd(Dynamics4GenomicBigData_HOME);
+
   cache_folder_name = 'GEO_cache';
   path_to_cached_file = [cache_folder_name '/' GEO_number '.txt'];
   
@@ -37,6 +43,8 @@ function [geoStruct, list_of_genes, gene_ID_type, list_of_probe_ids] = get_geo_d
       list_of_probe_ids = strtrim(cellstr(num2str(cell2mat(list_of_probe_ids))));
     end
     
+    cd(current_folder);
+    
   catch causeException
     msgID = 'MATLAB:rmpath:DirNotFound1';
     msg = ['Unable to retrieve dataset ''' GEO_number ''' from the Gene Expression Omnibus.'];
diff --git a/manual.m b/manual.m
index 948fba5..9e947cf 100644
--- a/manual.m
+++ b/manual.m
@@ -1,24 +1,19 @@
 set_paths_and_imports;
 
-Condition_file = 'GSE59015_-_D10_-_3000.csv';
+Condition_file = 'GSE59015_-_Wildtype_-_3000.csv';
 
 cd('Input');
-[GEO_number, condition, samples, time_points, number_of_top_DRGs] = read_input([Condition_file]);
+[GEO_number, condition, samples, preprocessed_time_points, number_of_top_DRGs_considered] = read_input([Condition_file]);
 cd('..');
 
-% The following function call may take some time to complete.
-[geoStruct, list_of_genes, gene_ID_type, list_of_probe_ids] = get_geo_data(GEO_number);
+[gene_expression, standardized_gene_expression, time_points, gene_ID_type, smooth_gene_trajectories] = step_2(GEO_number, samples, preprocessed_time_points, false);
 
-[raw_gene_expression, raw_time_points] = step_1(geoStruct, samples, time_points);
+[gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients] = step_3(gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs_considered, false);
 
-[gene_expression, time_points, smooth_gene_trajectories, standardized_gene_expression] = step_2(raw_gene_expression, raw_time_points, false);
+list_of_grms = step_4(standardized_gene_expression_sorted_by_F_value, time_points, number_of_top_DRGs_considered, false);
 
-[gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients, indices_of_top_DRGs, list_of_top_DRGs, indices_of_genes_sorted_by_F_value] = step_3(list_of_genes, gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs, list_of_probe_ids, standardized_gene_expression, false);
-
-[list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means] = step_4(list_of_probe_ids, list_of_genes, standardized_gene_expression, time_points, list_of_top_DRGs, indices_of_top_DRGs, smooth_gene_expression, false);
-
-[coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_gene_clusters, time_points, indices_of_top_DRGs, fd_smooth_coefficients, false);
+[coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_grms, time_points, fd_smooth_coefficients, false);
 
 [network_graph, graph_statistics, node_statistics] = step_6(adjacency_matrix_of_gene_regulatory_network, false);
 
-[chartReport, tableReport] = step_7(list_of_genes, list_of_gene_clusters, indices_of_top_DRGs, gene_ID_type);
+[chartReport, tableReport] = step_7(list_of_grms, gene_ID_type);
diff --git a/measure_fit_of_replicates.m b/measure_fit_of_replicates.m
index 603c1f1..3f936f6 100644
--- a/measure_fit_of_replicates.m
+++ b/measure_fit_of_replicates.m
@@ -18,19 +18,24 @@ function measure_fit_of_replicates()
   
     replicate_condition = [condition '_replicate_' num2str(i)];
     
-    samples_replicate = samples(:,i);
+    samples_replicate = samples(:,i);    
     
-    [standardized_gene_expression{i}, time_points_replicate{i}, list_of_genes{i}, list_of_probe_ids{i}] = get_exp_data(GEO_number, replicate_condition, samples_replicate, time_points, number_of_top_DRGs);
+    [gene_expression{i}, standardized_gene_expression{i}, time_points_replicate{i}] = step_2(GEO_number, samples_replicate, time_points, false);
     
+    standardized_gene_expression{i} = cell2mat(table2cell(standardized_gene_expression{i}(:, 3:size(standardized_gene_expression{i},2))));
+    
+    list_of_genes{i} = table2cell(gene_expression{i}(:,2));
+    
+    list_of_probe_ids{i} = table2cell(gene_expression{i}(:,1));
   end
-
+  
   general_comparison_folder = [Dynamics4GenomicBigData_HOME 'Output/' GEO_number '/Comparison_of_replicates/' condition];
   mkdir(general_comparison_folder);
   
   % The following two lines measure the noise between the replicates.
   % The results are stored in variable list_of_probes_genes_noise, which is a cell array where the first column is the probe ids, the second column is the gene names and the third column is the noise measurements across the replicates.
   % The order of the probe ids/gene names is the same as in the original GEO matrix.
-  noise_per_gene = measure_noise_between_replicates(standardized_gene_expression);  
+  noise_per_gene = measure_noise_between_replicates(standardized_gene_expression);
   list_of_probes_genes_noise = [strtrim(list_of_probe_ids{1}) strtrim(list_of_genes{1}) num2cell(noise_per_gene)];
   
   list_of_probes_genes_noise = [[{'Probe IDs'} {'Gene names'} {'Noise'}]; list_of_probes_genes_noise];
@@ -40,7 +45,6 @@ function measure_fit_of_replicates()
   list_of_probes_genes_noise_sorted_by_noise = [num2cell(I) strtrim(list_of_probe_ids{1}(I)) strtrim(list_of_genes{1}(I)) num2cell(noise_per_gene(I))];
     
   list_of_probes_genes_noise_sorted_by_noise = [[{'Row in GSE matrix'} {'Probe IDs'} {'Gene names'} {'Noise'}]; list_of_probes_genes_noise_sorted_by_noise];
-
     
   cd(general_comparison_folder);
     
@@ -61,7 +65,6 @@ function measure_fit_of_replicates()
     close all;
   end
 
-    
   for probe_id_index_seq = floor(linspace(min(10, length(I)),max(0,length(I)-10),10))
     probe_id_index = I(probe_id_index_seq);
     
@@ -74,7 +77,7 @@ function measure_fit_of_replicates()
     print(gcf,'-dpdf', [num2str(probe_id_index_seq) '_Probe_' list_of_probe_ids{1}{probe_id_index}]);
     close all;
   end
-    
+  
   for probe_id_index_seq = max(0,length(I)-10):length(I)
     probe_id_index = I(probe_id_index_seq);
     
@@ -92,8 +95,6 @@ function measure_fit_of_replicates()
 
 end
 
-
-
 % Input
 % gene_expression_of_replicates is a R-sized cell array where each element is an MxN matrix of double values representing the gene expression of one replicate. The rows of the matrix are the genes and the columns are the time points. It is assumed that all matrices have the same size. That is to say, it is assumed that all replicates provided as input have the same number of genes and time points.
 
@@ -154,72 +155,4 @@ function noise_per_gene = measure_noise_between_replicates(gene_expression_of_re
   
   end
 
-end
-
-
-function [standardized_gene_expression, time_points, list_of_genes, list_of_probe_ids] = get_exp_data(GEO_number, condition, samples, time_points, number_of_top_DRGs)
-
-  global Dynamics4GenomicBigData_HOME;
-
-  try
-    fprintf('\n');
-    display(['Loading dataset. This can take some time, please wait...']);
-    [geoStruct, list_of_genes, gene_ID_type, list_of_probe_ids] = get_geo_data(GEO_number);
-  catch
-    fprintf('\n');
-    display(['Could not retrieve dataset ' GEO_number ' from the Gene Expression Omnibus.']);
-    fprintf('\n');
-    display(['This is possibly because the GEO refused the FTP connection or because the dataset does not exist.']);
-    fprintf('\n');
-    display(['Please download manually ' GEO_number '''s matrix to ' pwd '/GEO_cache/' GEO_number '.txt and try again.']);
-    return;
-  end
-
-  [raw_gene_expression_array, raw_time_points_array] = step_1(geoStruct, samples, time_points);
-
-  fprintf('\n');
-  display(['Loading replicate "' condition '" is starting.']);
-
-  [standardized_gene_expression, time_points] = run_pipeline_analysis_on_condition(GEO_number, list_of_genes, raw_gene_expression_array, raw_time_points_array, condition, condition, gene_ID_type, number_of_top_DRGs, list_of_probe_ids, geoStruct);
-    
-  fprintf('\n');
-  display(['The data of replicate "' condition '" has been loaded.']);
-    
-%    fprintf('\n');
-%    display(['Results have been output to folder ' Dynamics4GenomicBigData_HOME 'Results/' GEO_number '/Conditions/' condition '/']);
-
-end
-
-function [standardized_gene_expression, time_points] = run_pipeline_analysis_on_condition(GEO_number, list_of_genes, raw_gene_expression, raw_time_points, subject_name, condition, gene_ID_type, number_of_top_DRGs_considered, list_of_probe_ids, geoStruct)
-
-  global Dynamics4GenomicBigData_HOME;
-  
-  global pipeline_version;
-  
-%    output_folder = strcat(Dynamics4GenomicBigData_HOME,'Output/',GEO_number,'/Conditions/',condition);
-%        
-%    mkdir(output_folder);
-%    cd(output_folder);
-    
-  [gene_expression, time_points, smooth_gene_trajectories, standardized_gene_expression] = step_2(raw_gene_expression, raw_time_points, false);
-
-  [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients, indices_of_top_DRGs, list_of_top_DRGs, indices_of_genes_sorted_by_F_value] = step_3(list_of_genes, gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs_considered, list_of_probe_ids, standardized_gene_expression, false);
-
-%    [list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means] = step_4(list_of_probe_ids, list_of_genes, standardized_gene_expression, time_points, list_of_top_DRGs, indices_of_top_DRGs, smooth_gene_expression, true);
-%  
-%    [coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_gene_clusters, time_points, indices_of_top_DRGs, fd_smooth_coefficients, true);
-%  
-%    [network_graph, graph_statistics, node_statistics] = step_6(adjacency_matrix_of_gene_regulatory_network, true);
-%  
-%    [chartReport, tableReport] = step_7(list_of_genes, list_of_gene_clusters, indices_of_top_DRGs, gene_ID_type);
-%    
-%    path_to_results_file = ['Results.mat'];
-%    
-%    save(path_to_results_file, 'gene_expression', 'time_points', 'list_of_top_DRGs', 'list_of_gene_clusters', 'gene_expression_by_cluster', 'list_of_cluster_means', 'coefficients', 'adjacency_matrix_of_gene_regulatory_network', 'network_graph', 'graph_statistics', 'node_statistics', 'subject_name', 'gene_ID_type', 'indices_of_top_DRGs', 'number_of_statistically_significant_DRGs', 'list_of_genes', 'gene_expression_sorted_by_F_value', 'list_of_probe_ids', 'indices_of_genes_sorted_by_F_value', 'standardized_gene_expression');
-%    
-%    writetable(cell2table({pipeline_version}), 'VERSION.txt', 'WriteVariableNames', false);
-%    
-%    close all;
-  
-  cd(Dynamics4GenomicBigData_HOME);
-end
+end
\ No newline at end of file
diff --git a/pipeline.m b/pipeline.m
index a5f50ff..840ad52 100644
--- a/pipeline.m
+++ b/pipeline.m
@@ -31,7 +31,7 @@ function pipeline()
 
     fprintf('\n');
     display(['All results from dataset ' unique_GEO_numbers{i} ' have been output to folder ' Dynamics4GenomicBigData_HOME 'Output/' unique_GEO_numbers{i} '/Conditions/']);
-
+    
     write_study_report(unique_GEO_numbers{i});
 
     fprintf('\n');
@@ -40,7 +40,7 @@ function pipeline()
   end
 end
 
-function run_condition(GEO_number, condition, samples, time_points, number_of_top_DRGs)
+function run_condition(GEO_number, condition, samples, preprocessed_time_points, number_of_top_DRGs)
 
   global Dynamics4GenomicBigData_HOME;
 
@@ -58,12 +58,10 @@ function run_condition(GEO_number, condition, samples, time_points, number_of_to
     return;
   end
 
-  [raw_gene_expression_array, raw_time_points_array] = step_1(geoStruct, samples, time_points);
-
   fprintf('\n');
   display(['The analysis of condition "' condition '" is starting.']);
 
-  run_pipeline_analysis_on_condition(GEO_number, list_of_genes, raw_gene_expression_array, raw_time_points_array, condition, condition, gene_ID_type, number_of_top_DRGs, list_of_probe_ids, geoStruct);
+  run_pipeline_analysis_on_condition(GEO_number, condition, samples, preprocessed_time_points, number_of_top_DRGs);
     
   fprintf('\n');
   display(['The analysis of condition "' condition '" has been completed.']);
@@ -74,7 +72,7 @@ function run_condition(GEO_number, condition, samples, time_points, number_of_to
 end
 
 
-function run_pipeline_analysis_on_condition(GEO_number, list_of_genes, raw_gene_expression, raw_time_points, subject_name, condition, gene_ID_type, number_of_top_DRGs_considered, list_of_probe_ids, geoStruct)
+function run_pipeline_analysis_on_condition(GEO_number, condition, samples, preprocessed_time_points, number_of_top_DRGs_considered)
 
   global Dynamics4GenomicBigData_HOME;
   
@@ -84,18 +82,18 @@ function run_pipeline_analysis_on_condition(GEO_number, list_of_genes, raw_gene_
       
   mkdir(output_folder);
   cd(output_folder);
-    
-  [gene_expression, time_points, smooth_gene_trajectories, standardized_gene_expression] = step_2(raw_gene_expression, raw_time_points, true);
+  
+  [gene_expression, standardized_gene_expression, time_points, gene_ID_type, smooth_gene_trajectories] = step_2(GEO_number, samples, preprocessed_time_points, true);
 
-  [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients, indices_of_top_DRGs, list_of_top_DRGs, indices_of_genes_sorted_by_F_value] = step_3(list_of_genes, gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs_considered, list_of_probe_ids, standardized_gene_expression, true);
+  [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients] = step_3(gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs_considered, true);
 
-  [list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means] = step_4(list_of_probe_ids, list_of_genes, standardized_gene_expression, time_points, list_of_top_DRGs, indices_of_top_DRGs, smooth_gene_expression, true);
+  list_of_grms = step_4(standardized_gene_expression_sorted_by_F_value, time_points, number_of_top_DRGs_considered, true);
 
-  [coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_gene_clusters, time_points, indices_of_top_DRGs, fd_smooth_coefficients, true);
+  [coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_grms, time_points, fd_smooth_coefficients, true);
 
   [network_graph, graph_statistics, node_statistics] = step_6(adjacency_matrix_of_gene_regulatory_network, true);
 
-  [chartReport, tableReport] = step_7(list_of_genes, list_of_gene_clusters, indices_of_top_DRGs, gene_ID_type);
+  [chartReport, tableReport] = step_7(list_of_grms, gene_ID_type);
   
   path_to_results_file = ['Results.mat'];
 
@@ -104,23 +102,21 @@ function run_pipeline_analysis_on_condition(GEO_number, list_of_genes, raw_gene_
   results.geo_series_number = GEO_number;
   results.condition = condition;
   results.gene_ID_type = gene_ID_type;
-  results.list_of_probe_ids = list_of_probe_ids;
-  results.list_of_genes = list_of_genes;
+  results.list_of_probe_ids = table2cell(gene_expression(:,1));
+  results.list_of_genes = table2cell(gene_expression(:,2));
   
   results.step_2.gene_expression = gene_expression;
   results.step_2.time_points = time_points;
   
-  results.step_3.list_of_top_DRGs = list_of_top_DRGs;
-  results.step_3.indices_of_top_DRGs = indices_of_top_DRGs;
+  results.step_3.list_of_top_DRGs = table2cell(standardized_gene_expression_sorted_by_F_value(1:number_of_top_DRGs_considered,2));
+  results.step_3.indices_of_top_DRGs = table2cell(standardized_gene_expression_sorted_by_F_value(1:number_of_top_DRGs_considered,1));
   results.step_3.number_of_statistically_significant_DRGs = number_of_statistically_significant_DRGs;
   results.step_3.gene_expression_sorted_by_F_value = gene_expression_sorted_by_F_value;
-  results.step_3.indices_of_genes_sorted_by_F_value = indices_of_genes_sorted_by_F_value;
+  results.step_3.indices_of_genes_sorted_by_F_value = table2cell(standardized_gene_expression_sorted_by_F_value(1:number_of_top_DRGs_considered,1));
   results.step_3.standardized_gene_expression = standardized_gene_expression;
   results.step_3.standardized_gene_expression_sorted_by_F_value = standardized_gene_expression_sorted_by_F_value;
   
-  results.step_4.list_of_gene_clusters = list_of_gene_clusters;
-  results.step_4.gene_expression_by_cluster = gene_expression_by_cluster;
-  results.step_4.list_of_cluster_means = list_of_cluster_means;
+  results.step_4.list_of_grms = list_of_grms;
   
   results.step_5.coefficients = coefficients;
   results.step_5.adjacency_matrix_of_gene_regulatory_network = adjacency_matrix_of_gene_regulatory_network;
@@ -154,9 +150,7 @@ function write_study_report(GEO_number)
   gene_expression = {};
   time_points = {};
   list_of_top_DRGs = {};
-  list_of_gene_clusters = {};
-  gene_expression_by_cluster = {};
-  list_of_cluster_means = {};
+  list_of_grms = {};
   coefficients = {};
   adjacency_matrix_of_gene_regulatory_network = {};
   network_graph = {};
@@ -178,9 +172,9 @@ function write_study_report(GEO_number)
 
     results{i} = load_analysis(GEO_number, conditions{i});
     
-    list_of_statistically_significant_DRGs{i} = results{i}.step_3.gene_expression_sorted_by_F_value(1:results{i}.step_3.number_of_statistically_significant_DRGs,1:2);
+    list_of_statistically_significant_DRGs{i} = results{i}.step_3.gene_expression_sorted_by_F_value(1:results{i}.step_3.number_of_statistically_significant_DRGs,2:3);
     
-    list_of_statistically_significant_DRGs{i} = cellfun(@num2str, list_of_statistically_significant_DRGs{i}, 'UniformOutput', false);
+    list_of_statistically_significant_DRGs{i} = cellfun(@num2str, table2cell(list_of_statistically_significant_DRGs{i}), 'UniformOutput', false);
     
   end
   
@@ -249,9 +243,9 @@ function write_study_report(GEO_number)
   for condition_iter_index = 1:length(conditions)
     condition = conditions{condition_iter_index};
     
-    fprintf(draft,'\n\t%s\n', ['\texttt{' strrep(condition, '_', '\_') '}' ' & ' num2str(length(results{condition_iter_index}.step_2.time_points)) ' & ' num2str(results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs) ' & ' num2str(length(results{condition_iter_index}.step_3.indices_of_top_DRGs)) ' & ' num2str(length(results{condition_iter_index}.step_4.list_of_gene_clusters)) ' \\ \hline']);
+    fprintf(draft,'\n\t%s\n', ['\texttt{' strrep(condition, '_', '\_') '}' ' & ' num2str(length(results{condition_iter_index}.step_2.time_points)) ' & ' num2str(results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs) ' & ' num2str(length(results{condition_iter_index}.step_3.indices_of_top_DRGs)) ' & ' num2str(length(results{condition_iter_index}.step_4.list_of_grms)) ' \\ \hline']);
     
-    statistics_of_current_analysis = {GEO_number, condition, num2str(size(results{condition_iter_index}.step_2.time_points,1)), num2str(results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs), num2str(size(results{condition_iter_index}.step_3.list_of_top_DRGs,1)), num2str(size(results{condition_iter_index}.step_4.list_of_gene_clusters,2))};    
+    statistics_of_current_analysis = {GEO_number, condition, num2str(size(results{condition_iter_index}.step_2.time_points,1)), num2str(results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs), num2str(size(results{condition_iter_index}.step_3.list_of_top_DRGs,1)), num2str(size(results{condition_iter_index}.step_4.list_of_grms,2))};    
     statistics_of_analyses = [statistics_of_analyses; statistics_of_current_analysis];
 
   end
@@ -300,7 +294,7 @@ function write_study_report(GEO_number)
   
   for condition_iter_index = 1:length(conditions)
     condition = conditions{condition_iter_index};
-    write_condition_section(draft, GEO_number, condition, results{condition_iter_index}.step_2.gene_expression, results{condition_iter_index}.step_2.time_points, results{condition_iter_index}.step_3.list_of_top_DRGs, results{condition_iter_index}.step_4.list_of_gene_clusters, results{condition_iter_index}.step_4.gene_expression_by_cluster, results{condition_iter_index}.step_4.list_of_cluster_means, results{condition_iter_index}.step_5.coefficients, results{condition_iter_index}.step_5.adjacency_matrix_of_gene_regulatory_network, results{condition_iter_index}.step_6.network_graph, results{condition_iter_index}.step_6.graph_statistics, results{condition_iter_index}.step_6.node_statistics, results{condition_iter_index}.gene_ID_type, results{condition_iter_index}.step_3.indices_of_top_DRGs, results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs, results{condition_iter_index}.step_3.gene_expression_sorted_by_F_value);
+    write_condition_section(draft, GEO_number, condition, results{condition_iter_index}.step_2.gene_expression, results{condition_iter_index}.step_2.time_points, results{condition_iter_index}.step_3.list_of_top_DRGs, results{condition_iter_index}.step_4.list_of_grms, results{condition_iter_index}.step_5.coefficients, results{condition_iter_index}.step_5.adjacency_matrix_of_gene_regulatory_network, results{condition_iter_index}.step_6.network_graph, results{condition_iter_index}.step_6.graph_statistics, results{condition_iter_index}.step_6.node_statistics, results{condition_iter_index}.gene_ID_type, results{condition_iter_index}.step_3.indices_of_top_DRGs, results{condition_iter_index}.step_3.number_of_statistically_significant_DRGs, results{condition_iter_index}.step_3.gene_expression_sorted_by_F_value);
   end
 
   fid = fopen('Part3.tex');
@@ -328,7 +322,7 @@ function write_study_report(GEO_number)
 
 end
 
-function write_condition_section(draft, GEO_number, condition, gene_expression, time_points, list_of_top_DRGs, list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means, coefficients, adjacency_matrix_of_gene_regulatory_network, network_graph, graph_statistics, node_statistics, gene_ID_type, indices_of_top_DRGs, number_of_statistically_significant_DRGs, gene_expression_sorted_by_F_value)
+function write_condition_section(draft, GEO_number, condition, gene_expression, time_points, list_of_top_DRGs, list_of_grms, coefficients, adjacency_matrix_of_gene_regulatory_network, network_graph, graph_statistics, node_statistics, gene_ID_type, indices_of_top_DRGs, number_of_statistically_significant_DRGs, gene_expression_sorted_by_F_value)
 
   global Dynamics4GenomicBigData_HOME;
   
@@ -398,40 +392,40 @@ function write_condition_section(draft, GEO_number, condition, gene_expression,
   fprintf(draft,'%s\n', ['\end{figure}']);
   
   % Graph statistics of the GRN
-  text = ['\begin{center} \begin{table} \centering \begin{tabular}{ | l | l | p{5cm} |} \hline Metric & Value  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-
-  text = [graph_statistics{1,1} ' & ' num2str(graph_statistics{1,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = [graph_statistics{2,1} ' & ' num2str(graph_statistics{2,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = [graph_statistics{3,1} ' & ' num2str(graph_statistics{3,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = [graph_statistics{4,1} ' & ' num2str(graph_statistics{4,2}) '  \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  text = ['\end{tabular} \caption{Graph metrics of the gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.} \label{table:graphstats_' condition '} \end{table} \end{center}'];
-  fprintf(draft, '%s\n\n', text);
-  
-  % Node statistics of the GRN
-  text = ['\begin{center} \begin{table} \centering \begin{tabular}{ | l | c | c |} \hline Metric & Top ranking module & Bottom ranking module \\ \hline'];
-  fprintf(draft, '%s\n', text);
-    
-  for metric_index = 2:size(node_statistics,2)
-    
-    [max_value, index_of_max] = max([node_statistics{2:size(node_statistics,1),metric_index}]);
-    [min_value, index_of_min] = min([node_statistics{2:size(node_statistics,1),metric_index}]);
-      
-    text = [node_statistics{1,metric_index} ' & ' node_statistics{index_of_max+1,1} ' & ' node_statistics{index_of_min+1,1} '  \\ \hline'];
-    fprintf(draft, '%s\n', text);
-    
-  end
-  
-  text = ['\end{tabular} \caption{Node metrics of the gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.} \label{table:nodestats_' condition '} \end{table} \end{center}'];
-  fprintf(draft, '%s\n\n', text);
+%    text = ['\begin{center} \begin{table} \centering \begin{tabular}{ | l | l | p{5cm} |} \hline Metric & Value  \\ \hline'];
+%    fprintf(draft, '%s\n', text);
+%  
+%    text = [graph_statistics{1,1} ' & ' num2str(graph_statistics{1,2}) '  \\ \hline'];
+%    fprintf(draft, '%s\n', text);
+%      
+%    text = [graph_statistics{2,1} ' & ' num2str(graph_statistics{2,2}) '  \\ \hline'];
+%    fprintf(draft, '%s\n', text);
+%      
+%    text = [graph_statistics{3,1} ' & ' num2str(graph_statistics{3,2}) '  \\ \hline'];
+%    fprintf(draft, '%s\n', text);
+%      
+%    text = [graph_statistics{4,1} ' & ' num2str(graph_statistics{4,2}) '  \\ \hline'];
+%    fprintf(draft, '%s\n', text);
+%      
+%    text = ['\end{tabular} \caption{Graph metrics of the gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.} \label{table:graphstats_' condition '} \end{table} \end{center}'];
+%    fprintf(draft, '%s\n\n', text);
+%    
+%    % Node statistics of the GRN
+%    text = ['\begin{center} \begin{table} \centering \begin{tabular}{ | l | c | c |} \hline Metric & Top ranking module & Bottom ranking module \\ \hline'];
+%    fprintf(draft, '%s\n', text);
+%      
+%    for metric_index = 2:size(node_statistics,2)
+%      
+%      [max_value, index_of_max] = max([node_statistics{2:size(node_statistics,1),metric_index}]);
+%      [min_value, index_of_min] = min([node_statistics{2:size(node_statistics,1),metric_index}]);
+%        
+%      text = [node_statistics{1,metric_index} ' & ' node_statistics{index_of_max+1,1} ' & ' node_statistics{index_of_min+1,1} '  \\ \hline'];
+%      fprintf(draft, '%s\n', text);
+%      
+%    end
+%    
+%    text = ['\end{tabular} \caption{Node metrics of the gene regulatory network in condition \texttt{' strrep(condition, '_', '\_') '}.} \label{table:nodestats_' condition '} \end{table} \end{center}'];
+%    fprintf(draft, '%s\n\n', text);
   
   % Gene annotation
   text = ['In order to annotate all the dynamic response genes in condition \texttt{' strrep(condition, '_', '\_') '}, the full list of genes must be submitted to the \textit{DAVID} \href{https://david.ncifcrf.gov}{website}. This full list of genes can be found in supplementary file \href{Conditions/' condition '/Step_7/All\_DRGs.txt}{All\_DRGs.txt}.'];
diff --git a/set_paths_and_imports.m b/set_paths_and_imports.m
index d4f498d..fe74114 100644
--- a/set_paths_and_imports.m
+++ b/set_paths_and_imports.m
@@ -6,7 +6,7 @@ global Dynamics4GenomicBigData_HOME;
 Dynamics4GenomicBigData_HOME = strcat(pwd,'/');
 
 global pipeline_version;
-pipeline_version = 'Pipeline Version 1.58';
+pipeline_version = 'Pipeline Version 1.59';
 
 %Add Paths
 addpath(Dynamics4GenomicBigData_HOME);
diff --git a/step_1.m b/step_1.m
deleted file mode 100644
index 2d533f0..0000000
--- a/step_1.m
+++ /dev/null
@@ -1,86 +0,0 @@
-% Input
-% Parameter samples is an MxN cell array of strings where each element is the accession number of a
-% GEO sample. In other words, each element must start with the prefix 'GSM'. M is the number of
-% time points and N is the number of replicates that comprise the experimental condition. If N>1
-% then the raw gene expression returned is the average of the N replicates. The expression of each
-% gene, each time point is averaged across the N replicates. In other words, the N matrices are
-% averaged, element-wise.
-
-% Parameter time_points is a Mx1 cell array of strings where each element is a time point expressed
-% with units, e.g., '2 hours'. The dimension of this array must be consistent with that of
-% parameter samples.
-
-% Output
-
-function [raw_gene_expression, raw_time_points] = step_1(geoStruct, samples, time_points)
-  
-  GSE_matrix = double(geoStruct.Data);
-  
-  raw_gene_expression = [];
-  
-  for time_point_index = 1:size(samples,1)
-  
-    samples_at_current_time_point = samples(time_point_index,:);
-    
-    [indices_of_samples_in_matrix, not_found] = find_in_cell_array_of_strings(geoStruct.Header.Samples.geo_accession, samples_at_current_time_point);
-    
-    raw_gene_expression_at_time_point{time_point_index} = median(GSE_matrix(:,indices_of_samples_in_matrix),2);
-  
-  end
-  
-  raw_gene_expression = cell2mat(raw_gene_expression_at_time_point);
-
-  raw_time_points = ExtractTimePoints(time_points');
-  
-  raw_time_points = cell2mat(raw_time_points(:,1));
-  
-end
-
-%  A = [2 5 3 6; 1 8 5 9; 1 4 8 9];
-%  B = [2 5 2 5; 1 0 3 9; 0 0 1 3];
-%  C = [2 1 1 5; 1 8 3 5; 5 0 1 0];
-%  
-%  Z = [];
-%  
-%  Z = cat(3, Z, A);
-%  
-%  Z = cat(3, Z, B);
-%  
-%  Z = cat(3, Z, C);
-%  
-%  % Method 1
-%  Z = mean(Z,3);
-%  
-%  % Method 2
-%  Z = median(Z,3);
-%  
-%  % Method 3: Vahed's
-%  mean_per_time_point = mean(Z);
-%  Z = Z - repmat(mean_per_time_point, size(Z,1), 1);  
-
-
-% The parameters of this function are cell arrays of strings.
-% The function returns the indices in the first array where members of the second array were found.
-% Example
-% Input
-% cell_array_to_search = {'A', 'B', 'ABC', 'C', 'EFGZ', 'D', 'F'}
-% cell_array_to_search_for = {'ABC', 'EFGZ', 'HOHO'}
-% Output
-% indices = [3; 5]
-% not_found = ['HOHO']
-function [indices, not_found] = find_in_cell_array_of_strings(cell_array_to_search, cell_array_to_search_for)
-  indices = [];
-  not_found = [];
-  not_found_idx = [];
-  for i=1:length(cell_array_to_search_for)
-
-    idx = find(strcmp([cell_array_to_search(:)], strtrim(cell_array_to_search_for{i})));
-      
-    if(isempty(idx))
-      not_found = [not_found; {cell_array_to_search_for{i}}];
-      not_found_idx = [not_found_idx; i];
-    else
-      indices = [indices; idx];
-    end
-  end
-end
diff --git a/step_2.m b/step_2.m
index 13c209a..a835f87 100644
--- a/step_2.m
+++ b/step_2.m
@@ -14,9 +14,11 @@
 
 % smooth_gene_trajectories : This is the expression of genes with smooth trajectories. Also a matrix analogous to gene_expression, although possibly with less rows.
 
-function [gene_expression, time_points, smooth_gene_trajectories, standardized_gene_expression] = step_2(raw_gene_expression, raw_time_points, output)
+function [gene_expression, standardized_gene_expression, time_points, gene_ID_type, smooth_gene_trajectories] = step_2(GEO_number, samples, preprocessed_time_points, output)
 
-  [gene_expression, time_points] = get_preprocessed_data(raw_gene_expression, raw_time_points);
+  [raw_gene_expression, raw_time_points, gene_ID_type] = step_1(GEO_number, samples, preprocessed_time_points);
+
+  [gene_expression, time_points] = get_preprocessed_data(cell2mat(table2cell(raw_gene_expression(:,3:size(raw_gene_expression,2)))), raw_time_points);
   
   smooth_gene_trajectories = Est_Sub_Sel(time_points, gene_expression, 1);
   
@@ -24,6 +26,15 @@ function [gene_expression, time_points, smooth_gene_trajectories, standardized_g
   
   standardized_gene_expression = zscore(gene_expression')';
   
+  A = time_points';
+  A = A';
+  A = strtrim(cellstr(num2str(A))');
+  A = strcat('T_', A);
+  
+  gene_expression = cell2table([strtrim(table2cell(raw_gene_expression(:,1))) strtrim(table2cell(raw_gene_expression(:,2))) num2cell(gene_expression)], 'VariableNames', [{'Probe_ID'} {'Gene_ID'} A]);
+  
+  standardized_gene_expression = cell2table([strtrim(table2cell(raw_gene_expression(:,1))) strtrim(table2cell(raw_gene_expression(:,2))) num2cell(standardized_gene_expression)], 'VariableNames', [{'Probe_ID'} {'Gene_ID'} A]);
+  
   if(output)
   
     global Dynamics4GenomicBigData_HOME;
@@ -42,7 +53,7 @@ function [gene_expression, time_points, smooth_gene_trajectories, standardized_g
     set(gcf, 'PaperSize', [30 24]);
     axisLabelFontSize = 30;
     
-    surf(gene_expression,'FaceColor','interp','EdgeColor','none');
+    surf(cell2mat(table2cell(gene_expression(:,3:size(gene_expression,2)))), 'FaceColor', 'interp', 'EdgeColor', 'none');
 
     xlim([1,length(time_points)]);
 
@@ -51,7 +62,7 @@ function [gene_expression, time_points, smooth_gene_trajectories, standardized_g
 
     ylim([1,size(raw_gene_expression,1)]);
 
-    zlim([min(min(gene_expression)),max(max(gene_expression))]);
+    zlim([min(min(cell2mat(table2cell(gene_expression(:,3:size(gene_expression,2)))))),max(max(cell2mat(table2cell(gene_expression(:,3:size(gene_expression,2))))))]);
 
     xlabel('Time', 'FontSize', axisLabelFontSize);
 
@@ -85,11 +96,11 @@ function [gene_expression, time_points, smooth_gene_trajectories, standardized_g
     cd(outputFolder);
     
     
-    writetable(cell2table(num2cell(gene_expression)), ['gene_expression.csv'], 'WriteVariableNames', false);
+    writetable(gene_expression, ['gene_expression.csv'], 'WriteVariableNames', true);
     
-    writetable(cell2table(num2cell(standardized_gene_expression)), ['standardized_gene_expression.csv'], 'WriteVariableNames', false);
+    writetable(standardized_gene_expression, ['standardized_gene_expression.csv'], 'WriteVariableNames', true);
     
-    writetable(cell2table(num2cell(raw_gene_expression)), ['raw_gene_expression.csv'], 'WriteVariableNames', false);
+    writetable(raw_gene_expression, ['raw_gene_expression.csv'], 'WriteVariableNames', true);
     
     writetable(cell2table(num2cell(raw_time_points)), ['raw_time_points.csv'], 'WriteVariableNames', false);
     
@@ -97,8 +108,55 @@ function [gene_expression, time_points, smooth_gene_trajectories, standardized_g
     
     cd('..');
     
+    close all;
+    
+  end
+  
+end
+
+% Input
+% Parameter samples is an MxN cell array of strings where each element is the accession number of a
+% GEO sample. In other words, each element must start with the prefix 'GSM'. M is the number of
+% time points and N is the number of replicates that comprise the experimental condition. If N>1
+% then the raw gene expression returned is the average of the N replicates. The expression of each
+% gene, each time point is averaged across the N replicates. In other words, the N matrices are
+% averaged, element-wise.
+
+% Parameter preprocessed_time_points is a Mx1 cell array of strings where each element is a time point expressed
+% with units, e.g., '2 hours'. The dimension of this array must be consistent with that of
+% parameter samples.
+
+% Output
+function [raw_gene_expression, raw_time_points, gene_ID_type] = step_1(GEO_number, samples, preprocessed_time_points)
+
+  [geoStruct, list_of_genes, gene_ID_type, list_of_probe_ids] = get_geo_data(GEO_number);
+  
+  GSE_matrix = double(geoStruct.Data);
+  
+  raw_gene_expression = [];
+  
+  for time_point_index = 1:size(samples,1)
+  
+    samples_at_current_time_point = samples(time_point_index,:);
+    
+    [indices_of_samples_in_matrix, not_found] = find_strings_in_cell_array(geoStruct.Header.Samples.geo_accession, samples_at_current_time_point);
+    
+    raw_gene_expression_at_time_point{time_point_index} = median(GSE_matrix(:,indices_of_samples_in_matrix),2);
+  
   end
   
+  raw_gene_expression = cell2mat(raw_gene_expression_at_time_point);
+
+  raw_time_points = ExtractTimePoints(preprocessed_time_points');
+  
+  raw_time_points = cell2mat(raw_time_points(:,1));
+  
+  A = 1:size(raw_gene_expression,2);
+  A = A';
+  A = cellstr(num2str(A))';
+  
+  raw_gene_expression = cell2table([strtrim(list_of_probe_ids) strtrim(list_of_genes) num2cell(raw_gene_expression)], 'VariableNames', [{'Probe_ID'} {'Gene_ID'} strcat('T', A)]);
+  
 end
 
 
diff --git a/step_3.m b/step_3.m
index 2a7e038..cdae75f 100644
--- a/step_3.m
+++ b/step_3.m
@@ -1,10 +1,16 @@
-function [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients, indices_of_top_DRGs_in_series_matrix, list_of_top_DRGs, indices_of_genes_sorted_by_F_value] = step_3(list_of_genes, gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs_considered, list_of_probe_ids, standardized_gene_expression, output)
+function [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted_by_F_value, number_of_statistically_significant_DRGs, smooth_gene_expression, fd_smooth_coefficients] = step_3(gene_expression, time_points, smooth_gene_trajectories, number_of_top_DRGs_considered, output)
 
   global Dynamics4GenomicBigData_HOME;
 
   flder = pwd;
   
-  total_number_of_genes_in_geo_record = size(gene_expression,1);
+  gene_expression_mat = cell2mat(table2cell(gene_expression(:,3:size(gene_expression,2))));
+  standardized_gene_expression_mat = zscore(gene_expression_mat')';
+  
+  list_of_probe_ids = strtrim(table2cell(gene_expression(:,1)));
+  list_of_genes = strtrim(table2cell(gene_expression(:,2)));
+  
+  total_number_of_genes_in_geo_record = size(gene_expression_mat,1);
   
   %  -----------------------------------------------------------------------
 
@@ -33,32 +39,36 @@ function [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted
   R = eval_penalty(basisobj,2);
   lambdagenes = fminbnd(@multiple_GCV_fun, 10.^-6, 10^6, options, B, smooth_gene_trajectories', R);
   fdParobj = fdPar(basisobj, 2, lambdagenes);
-  [fd_smooth_coefficients, degrees_of_freedom, gcvgenens,~,SSE]  = smooth_basis(time_points, gene_expression', fdParobj);
+  [fd_smooth_coefficients, degrees_of_freedom, gcvgenens,~,SSE]  = smooth_basis(time_points, gene_expression_mat', fdParobj);
     
   % The F test requires the degrees of freedom as an integer value. And the smooth_basis function does not always return integer values.
   % It is safe to round down to the nearest integer.
   degrees_of_freedom = floor(degrees_of_freedom);
     
   smooth_gene_expression = eval_fd(time_points, fd_smooth_coefficients);
-  smooth_gene_expression = smooth_gene_expression';
+  smooth_gene_expression = smooth_gene_expression';  
+  smooth_gene_expression = cell2table([list_of_probe_ids list_of_genes num2cell(smooth_gene_expression)], 'VariableNames', gene_expression.Properties.VariableNames);
+  
+  
   derivatives_of_smooth_gene_expression_curves = eval_fd(time_points, fd_smooth_coefficients,1);
   derivatives_of_smooth_gene_expression_curves = derivatives_of_smooth_gene_expression_curves';
   STDERR = sqrt(sum(SSE)/(total_number_of_genes_in_geo_record*(length(time_points)-degrees_of_freedom)));
 
-  [F, F_critic] = Ftest(gene_expression, time_points,  fd_smooth_coefficients, degrees_of_freedom);
+  [F, F_critic] = Ftest(gene_expression_mat, time_points,  fd_smooth_coefficients, degrees_of_freedom);
   
   [SF, indices_of_genes_sorted_by_F_value] = sort(F,'descend');
   indices_of_top_DRGs_in_series_matrix = indices_of_genes_sorted_by_F_value(1:number_of_top_DRGs_considered);
   list_of_top_DRGs = list_of_genes(indices_of_top_DRGs_in_series_matrix);
   list_of_probe_ids_sorted_by_F_value = strtrim(list_of_probe_ids(indices_of_genes_sorted_by_F_value));
   list_of_genes_sorted_by_F_value = strtrim(list_of_genes(indices_of_genes_sorted_by_F_value));
-  gene_expression_sorted_by_F_value = gene_expression(indices_of_genes_sorted_by_F_value,:);
-  standardized_gene_expression_sorted_by_F_value = standardized_gene_expression(indices_of_genes_sorted_by_F_value,:);
-  smooth_gene_expression_sorted_by_F_value = smooth_gene_expression(indices_of_genes_sorted_by_F_value,:);
+  gene_expression_sorted_by_F_value = gene_expression_mat(indices_of_genes_sorted_by_F_value,:);
+  standardized_gene_expression_sorted_by_F_value = standardized_gene_expression_mat(indices_of_genes_sorted_by_F_value,:);
+  smooth_gene_expression_sorted_by_F_value = cell2mat(table2cell(smooth_gene_expression(indices_of_genes_sorted_by_F_value,3:size(smooth_gene_expression,2))));
+  
+  gene_expression_sorted_by_F_value = cell2table([num2cell(indices_of_genes_sorted_by_F_value) list_of_probe_ids_sorted_by_F_value list_of_genes_sorted_by_F_value num2cell(SF) num2cell(gene_expression_sorted_by_F_value)], 'VariableNames', [{'Row_index_in_GSE_matrix'} {'Probe_ID'} {'Gene_name'} {'F_score'} strcat({'t_'}, strtrim(cellstr(strtrim(num2str(time_points)))))']);
   
-  gene_expression_sorted_by_F_value = [list_of_probe_ids_sorted_by_F_value list_of_genes_sorted_by_F_value num2cell(SF) num2cell(gene_expression_sorted_by_F_value)];
+  standardized_gene_expression_sorted_by_F_value = cell2table([num2cell(indices_of_genes_sorted_by_F_value) list_of_probe_ids_sorted_by_F_value list_of_genes_sorted_by_F_value num2cell(SF) num2cell(standardized_gene_expression_sorted_by_F_value)], 'VariableNames', [{'Row_index_in_GSE_matrix'} {'Probe_ID'} {'Gene_name'} {'F_score'} strcat({'t_'}, strtrim(cellstr(strtrim(num2str(time_points)))))']);
   
-  standardized_gene_expression_sorted_by_F_value = [list_of_probe_ids_sorted_by_F_value list_of_genes_sorted_by_F_value num2cell(SF) num2cell(standardized_gene_expression_sorted_by_F_value)];
   
   % The DRGs will be determined through an upper one-tailed F test.
   % The DRGs will be those whose F statistics are greater than the F_critic (F_{0.05, numerator_df, denominator_df})
@@ -84,14 +94,14 @@ function [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted
 
     for sub = 1:1
 
-	surf(smooth_gene_expression,'FaceColor','interp','EdgeColor','none');
+	surf(cell2mat(table2cell(smooth_gene_expression(:,3:size(smooth_gene_expression,2)))),'FaceColor','interp','EdgeColor','none');
 	xlim([1,length(time_points)]);
 	
 	set(gca,'XTick',1:length(time_points),'Xticklabel',time_points);
 	set(gca,'FontSize',11);
 
-	ylim([1,size(smooth_gene_expression',2)]);
-	zlim([min(min(smooth_gene_expression')),max(max(smooth_gene_expression'))]);
+	ylim([1,size(cell2mat(table2cell(smooth_gene_expression(:,3:size(smooth_gene_expression,2))))',2)]);
+	zlim([min(min(cell2mat(table2cell(smooth_gene_expression(:,3:size(smooth_gene_expression,2))))')),max(max(cell2mat(table2cell(smooth_gene_expression(:,3:size(smooth_gene_expression,2))))'))]);
 
 	xlabel('Time', 'FontSize', axisLabelFontSize);
 	ylabel('All genes', 'FontSize', axisLabelFontSize);
@@ -172,11 +182,11 @@ function [gene_expression_sorted_by_F_value, standardized_gene_expression_sorted
     
     cd(outputFolder);
     
-    writetable(cell2table([[{'Row index in GSE matrix'} {'Probe ID'} {'Gene name'} {'F score'} strcat({'t = '}, strtrim(cellstr(strtrim(num2str(time_points)))))']; [num2cell(indices_of_genes_sorted_by_F_value) gene_expression_sorted_by_F_value]]), ['gene_expression_sorted_by_F_value.csv'], 'WriteVariableNames', false);
+    writetable(gene_expression_sorted_by_F_value, ['gene_expression_sorted_by_F_value.csv'], 'WriteVariableNames', true);
     
-    writetable(cell2table([[{'Row index in GSE matrix'} {'Probe ID'} {'Gene name'} {'F score'} strcat({'t = '}, strtrim(cellstr(strtrim(num2str(time_points)))))']; [num2cell(indices_of_genes_sorted_by_F_value) standardized_gene_expression_sorted_by_F_value]]), ['standardized_gene_expression_sorted_by_F_value.csv'], 'WriteVariableNames', false);
+    writetable(standardized_gene_expression_sorted_by_F_value, ['standardized_gene_expression_sorted_by_F_value.csv'], 'WriteVariableNames', true);
     
-    writetable(cell2table(num2cell(smooth_gene_expression)), ['smooth_gene_expression.csv'], 'WriteVariableNames', false);
+    writetable(smooth_gene_expression, ['smooth_gene_expression.csv'], 'WriteVariableNames', true);
     writetable(cell2table(num2cell(derivatives_of_smooth_gene_expression_curves)), ['derivatives_of_smooth_gene_expression_curves.csv'], 'WriteVariableNames', false);
     writetable(cell2table({number_of_statistically_significant_DRGs}), ['number_of_statistically_significant_DRGs.csv'], 'WriteVariableNames', false);
     
diff --git a/step_4.m b/step_4.m
index 4826d25..6767231 100644
--- a/step_4.m
+++ b/step_4.m
@@ -1,28 +1,39 @@
-function [list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_means] = step_4(list_of_probe_ids, list_of_genes, standardized_gene_expression, time_points, list_of_top_DRGs, indices_of_top_DRGs, smooth_gene_expression, output)
+function list_of_grms = step_4(standardized_gene_expression_sorted_by_F_value, time_points, number_of_top_DRGs_considered, output)
 
   global Dynamics4GenomicBigData_HOME;
   
   flder=pwd;
- 
   
-  %  -----------------------------------------------------------------------
-
-  %                       Cluster (IHC)
-
-  %  -----------------------------------------------------------------------
-
-
+  list_of_probe_ids = table2cell(standardized_gene_expression_sorted_by_F_value(:,2));
+  list_of_genes = table2cell(standardized_gene_expression_sorted_by_F_value(:,3));
+  list_of_top_DRGs = table2cell(standardized_gene_expression_sorted_by_F_value(1:number_of_top_DRGs_considered,3));  
+  indices_of_top_DRGs_in_sd_matrix_sorted_by_F = 1:size(standardized_gene_expression_sorted_by_F_value,1)';
+  
+  indices_of_top_DRGs = cell2mat(table2cell(standardized_gene_expression_sorted_by_F_value(1:number_of_top_DRGs_considered,1)));
 
+  
+  
   %Theshold
   alpha = 0.75;
 
-  std_data = zscore(standardized_gene_expression(indices_of_top_DRGs,:)')';
+  std_data = zscore(cell2mat(table2cell(standardized_gene_expression_sorted_by_F_value(1:number_of_top_DRGs_considered,5:size(standardized_gene_expression_sorted_by_F_value,2))))')';
 
   [list_of_gene_clusters, rmclusters, c, list_of_cluster_means, gene_expression_by_cluster] = IHC(std_data, alpha);
-      
-      
+  
+  list_of_grms = [];  
+  for cluster_iteration_ID=1:length(list_of_gene_clusters)
+    probe_ids_in_current_cluster = list_of_probe_ids(indices_of_top_DRGs_in_sd_matrix_sorted_by_F(list_of_gene_clusters{cluster_iteration_ID}));
+    names_of_genes_in_current_cluster = list_of_genes(indices_of_top_DRGs_in_sd_matrix_sorted_by_F(list_of_gene_clusters{cluster_iteration_ID}));
+    
+    group = indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID});
+    
+    grm = cell2table([num2cell(group) probe_ids_in_current_cluster names_of_genes_in_current_cluster num2cell(gene_expression_by_cluster{cluster_iteration_ID})], 'VariableNames', [{'Row_index_in_GSE_matrix'} {'Probe_ID'} {'Gene_name'} strcat({'t_'}, strtrim(cellstr(strtrim(num2str(time_points)))))']);
+    list_of_grms = [list_of_grms; {grm}];
+  end
+
   % The following four lines sort the clusters by size.
   [uselessVariable, cluster_indexes_by_size] = sort(cellfun('size', list_of_gene_clusters, 1), 'descend');
+  list_of_grms = list_of_grms(cluster_indexes_by_size);
   list_of_gene_clusters = list_of_gene_clusters(cluster_indexes_by_size);
   gene_expression_by_cluster = gene_expression_by_cluster(cluster_indexes_by_size);
   list_of_cluster_means = list_of_cluster_means(cluster_indexes_by_size,:);
@@ -295,17 +306,14 @@ function [list_of_gene_clusters, gene_expression_by_cluster, list_of_cluster_mea
     movefile('List_and_description_of_output.csv', outputFolder);
     
     cluster_iteration_ID = 1;
-    probe_ids_in_current_cluster = list_of_probe_ids(indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID}));
-    names_of_genes_in_current_cluster = list_of_genes(indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID}));
+    probe_ids_in_current_cluster = list_of_probe_ids(indices_of_top_DRGs_in_sd_matrix_sorted_by_F(list_of_gene_clusters{cluster_iteration_ID}));
+    names_of_genes_in_current_cluster = list_of_genes(indices_of_top_DRGs_in_sd_matrix_sorted_by_F(list_of_gene_clusters{cluster_iteration_ID}));
     
     mkdir([outputFolder '/GRMs']);
-    cd([outputFolder '/GRMs'])
+    cd([outputFolder '/GRMs']);
     
-    for cluster_iteration_ID=1:length(list_of_gene_clusters)
-      probe_ids_in_current_cluster = list_of_probe_ids(indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID}));
-      names_of_genes_in_current_cluster = list_of_genes(indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID}));
-      
-      writetable(cell2table([[{'Row index in GSE matrix'} {'Probe ID'} {'Gene name'} strcat({'t = '}, strtrim(cellstr(strtrim(num2str(time_points)))))']; [num2cell(indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID})) probe_ids_in_current_cluster names_of_genes_in_current_cluster num2cell(gene_expression_by_cluster{cluster_iteration_ID})]]), ['M' num2str(cluster_iteration_ID) '.csv'], 'WriteVariableNames', false);
+    for cluster_iteration_ID=1:length(list_of_gene_clusters)      
+      writetable(list_of_grms{cluster_iteration_ID}, ['M' num2str(cluster_iteration_ID) '.csv'], 'WriteVariableNames', true);
     end
     
     for cluster_number=1:length(list_of_cluster_means)
diff --git a/step_5.m b/step_5.m
index 8d89e6e..a0d0262 100644
--- a/step_5.m
+++ b/step_5.m
@@ -1,11 +1,14 @@
-function [coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_gene_clusters, time_points, indices_of_top_DRGs, fd_smooth_coefficients, output)
+function [coefficients, adjacency_matrix_of_gene_regulatory_network] = step_5(list_of_grms, time_points, fd_smooth_coefficients, output)
   
   global Dynamics4GenomicBigData_HOME;
   flder = pwd;
   
   %Obtain Smoothed Estimates of the derivative and trajectory.
-  for j = 1:length(list_of_gene_clusters)
-    group = indices_of_top_DRGs(list_of_gene_clusters{j});
+  for j = 1:length(list_of_grms)
+%      group = indices_of_top_DRGs(list_of_gene_clusters{j});
+    
+    group = cell2mat(table2cell(list_of_grms{j}(:,1)));
+    
     meanfd = mean_grouped(fd_smooth_coefficients,group);
     TimeEx = linspace(time_points(1),time_points(end),100)';
     yhatEx(:,j) = eval_fd(TimeEx, meanfd);
diff --git a/step_6.m b/step_6.m
index 1719126..9406f54 100644
--- a/step_6.m
+++ b/step_6.m
@@ -33,8 +33,11 @@ function [network_graph, graph_statistics, node_statistics] = step_6(adjacency_m
   end
   
   network_graph=digraph(adjacency_matrix_of_gene_regulatory_network, row_labels);
-  graph_statistics = calculate_graph_statistics_from_adjacency_matrix(adjacency_matrix_of_gene_regulatory_network);
-  node_statistics = calculate_node_statistics_from_adjacency_matrix(adjacency_matrix_of_gene_regulatory_network);
+%    graph_statistics = calculate_graph_statistics_from_adjacency_matrix(adjacency_matrix_of_gene_regulatory_network);
+%    node_statistics = calculate_node_statistics_from_adjacency_matrix(adjacency_matrix_of_gene_regulatory_network);
+  
+  graph_statistics = [];
+  node_statistics = [];
   
   if(output)
     outputFolder = 'Step_6';
@@ -52,14 +55,13 @@ function [network_graph, graph_statistics, node_statistics] = step_6(adjacency_m
     print('Network_plot_MATLAB.pdf','-dpdf');
     movefile('Network_plot_MATLAB.pdf', outputFolder);
     
-    graphStatsFileName = 'Graph_Statistics.xls';
-    
-    writetable(cell2table(graph_statistics), graphStatsFileName, 'WriteVariableNames', false);
-    movefile(graphStatsFileName, outputFolder);
-    
-    nodeStatsFileName = 'Node_Statistics.xls';
-    writetable(cell2table(node_statistics), nodeStatsFileName, 'WriteVariableNames', false);
-    movefile(nodeStatsFileName, outputFolder);
+%      graphStatsFileName = 'Graph_Statistics.xls';    
+%      writetable(cell2table(graph_statistics), graphStatsFileName, 'WriteVariableNames', false);
+%      movefile(graphStatsFileName, outputFolder);
+%      
+%      nodeStatsFileName = 'Node_Statistics.xls';
+%      writetable(cell2table(node_statistics), nodeStatsFileName, 'WriteVariableNames', false);
+%      movefile(nodeStatsFileName, outputFolder);
 
     matrix_to_save = [column_labels; [row_labels dependency_matrix]];
     matrix_to_save = cell2table(matrix_to_save);
@@ -110,8 +112,8 @@ function [network_graph, graph_statistics, node_statistics] = step_6(adjacency_m
     matrix_of_files_descs = [{'File name'} {'Description'}];
     
     matrix_of_files_descs = [matrix_of_files_descs; [{adjacencyMatrixFilename} {'Adjacency matrix of the gene regulatory network (GRN) in Excel format.'}]];
-    matrix_of_files_descs = [matrix_of_files_descs; [{graphStatsFileName} {'Graph metrics of the gene regulatory network (GRN).'}]];
-    matrix_of_files_descs = [matrix_of_files_descs; [{nodeStatsFileName} {'Node metrics of the gene regulatory network (GRN).'}]];
+%      matrix_of_files_descs = [matrix_of_files_descs; [{graphStatsFileName} {'Graph metrics of the gene regulatory network (GRN).'}]];
+%      matrix_of_files_descs = [matrix_of_files_descs; [{nodeStatsFileName} {'Node metrics of the gene regulatory network (GRN).'}]];
     matrix_of_files_descs = [matrix_of_files_descs; [{depMatrixFilename} {'Matrix of dependencies between the gene response modules (GRM) in the gene regulatory network (GRN).'}]];
     
     matrix_of_files_descs = [matrix_of_files_descs; [{networkSIF} {'Gene regulatory network in .sif format for import into Cytoscape.'}]];
@@ -124,6 +126,9 @@ function [network_graph, graph_statistics, node_statistics] = step_6(adjacency_m
 
     movefile('List_and_description_of_output.csv', outputFolder);
   end
+  
+  close all;
+  
 end
 
 function graph_statistics = calculate_graph_statistics_from_adjacency_matrix(adjacency_matrix_of_gene_regulatory_network)
diff --git a/step_7.m b/step_7.m
index 2824fbb..01f3ad7 100644
--- a/step_7.m
+++ b/step_7.m
@@ -1,4 +1,4 @@
-function [chartReport, tableReport] = step_7(list_of_genes, list_of_gene_clusters, indices_of_top_DRGs, gene_ID_type)
+function [chartReport, tableReport] = step_7(list_of_grms, gene_ID_type)
 
   global Dynamics4GenomicBigData_HOME;
 
@@ -7,17 +7,15 @@ function [chartReport, tableReport] = step_7(list_of_genes, list_of_gene_cluster
 %    py.importlib.import_module('DAVIDWS');
   
   cd(currentFolder);
-
-  list_of_genes_to_annotate = list_of_genes(indices_of_top_DRGs(:));
   
-  output_genes(list_of_genes, indices_of_top_DRGs, list_of_gene_clusters, 'Step_7', path);
+  list_of_genes_to_annotate = output_genes(list_of_grms, 'Step_7', path);
   
   chartReport = [];
   tableReport = [];
   
 %    [chartReport, tableReport] = annotate_genes(list_of_genes_to_annotate, gene_ID_type, true, true);
   
-  annotate_genes_and_output_reports(chartReport, tableReport, gene_ID_type, list_of_genes, indices_of_top_DRGs, list_of_gene_clusters, 'Step_7', Dynamics4GenomicBigData_HOME, true, true);
+%    annotate_genes_and_output_reports(chartReport, tableReport, gene_ID_type, list_of_genes, indices_of_top_DRGs, list_of_gene_clusters, 'Step_7', Dynamics4GenomicBigData_HOME, true, true);
 end
 
 function [chartReport, tableReport] = annotate_genes(list_of_genes_to_annotate, gene_ID_type, includeChartReport, includeTableReport)
@@ -367,26 +365,31 @@ end
 
 
 
-function output_genes(list_of_genes, indices_of_top_DRGs, list_of_gene_clusters, output_dir, path)
+function list_of_genes_to_annotate = output_genes(list_of_grms, output_dir, path)
 
-  list_of_genes_to_annotate = list_of_genes(indices_of_top_DRGs(:));
+  list_of_genes_to_annotate = [];
   
   % Now that the chart and table reports have been obtained, we proceed to export them to files,
   % grouped by gene cluster.
   % The output directory is created in the following two lines.
   mkdir(output_dir);
   cd(output_dir);
-  write_gene_cluster_to_csv_file(list_of_genes_to_annotate,strcat('All_DRGs', '.txt'));
-  for cluster_iteration_ID = 1:length(list_of_gene_clusters)
+  
+  for cluster_iteration_ID = 1:length(list_of_grms)
     % First create the subfolder for the current cluster.
     mkdir(strcat('M',num2str(cluster_iteration_ID)));
     cd(strcat('M',num2str(cluster_iteration_ID)));
     
     % Then output all genes in the current cluster, for reference.
-    ids_of_genes_in_current_cluster = list_of_genes(indices_of_top_DRGs(list_of_gene_clusters{cluster_iteration_ID}));
+    ids_of_genes_in_current_cluster = table2cell(list_of_grms{cluster_iteration_ID}(:,3));
     write_gene_cluster_to_csv_file(ids_of_genes_in_current_cluster,strcat('Genes_in_M', num2str(cluster_iteration_ID), '.txt'));
+    
+    list_of_genes_to_annotate = [list_of_genes_to_annotate; ids_of_genes_in_current_cluster];
       
     cd('..');
   end
+  
+  write_gene_cluster_to_csv_file(list_of_genes_to_annotate,strcat('All_DRGs', '.txt'));
+  
   cd('..');
 end
